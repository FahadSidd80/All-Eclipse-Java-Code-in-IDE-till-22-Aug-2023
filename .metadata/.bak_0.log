!SESSION 2022-11-02 12:21:09.197 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\2101917\eclipse-workspace\.metadata\.bak_0.log
Created Time: 2022-11-02 13:17:33.871

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-02 13:17:33.873
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-02 13:17:33.883
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:34.178
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon);
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-02 13:17:34.183
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-02 13:17:34.186
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:35.904
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon());
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-02 13:17:35.908
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-02 13:17:35.911
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:36.012
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon());
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-02 13:17:36.015
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-02 13:17:36.018
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:36.933
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s));
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-02 13:17:36.936
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-02 13:17:36.938
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:37.551
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s));
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-02 13:17:37.555
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-02 13:17:37.558
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:39.973
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s));
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-02 13:17:39.976
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-02 13:17:39.979
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:40.002
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s));
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-02 13:17:40.006
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-02 13:17:40.010
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:41.513
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+);
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-02 13:17:41.517
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-02 13:17:41.519
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:41.841
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+);
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-02 13:17:41.846
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-02 13:17:41.850
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:42.554
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"");
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-02 13:17:42.559
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-02 13:17:42.562
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:43.022
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"");
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-02 13:17:43.026
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-02 13:17:43.029
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:45.103
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"\n");
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-02 13:17:45.107
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-02 13:17:45.111
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:17:45.137
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"\n");
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-02 13:17:45.144
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-02 13:17:45.147
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-02 13:18:03.662
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter side of hexagon : ");
		double s = sc.nextDouble();
		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"\n");
		
		
		
    }
		public static double areaOfHexagon(double s)
		{
			(6 * s^2)/(4*tan(π/6))
			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
			
		}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-02 13:18:03.666
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-02 13:18:03.670
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
!SESSION 2022-11-04 23:42:22.483 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-11-04 23:42:32.938
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-04 23:42:32.938
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3de88f64,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4e8afdad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-04 23:42:32.938
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-04 23:42:44.049
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2022-11-04 23:57:46.870
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter side of hexagon : ");
//		double s = sc.nextDouble();
//		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"\n");
//		
//		
//		
//    }
//		public static double areaOfHexagon(double s)
//		{
//			
//			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
//			
//		}
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the latitude of cordianate 1 : ");
		double lat1 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 1 : ");
		double long1 = sc.nextDouble();
		System.out.println("Enter the latitude of cordianate 2 : ");
		double lat2 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 2 : ");
		double long2 = sc.nextDouble();
		
		System.out.println("The distance between two points of earth is : " + );
		
		public static double distance_Between_LatLong() {
			lat1 = Math.toRadians(lat1);
			long1 = Math.toRadians(long1);
			lat2 = Math.toRadians(lat2);
			long2 = Math.toRadians(long2);
			double radius = 6371.01;
			return   radius * Math.acos(radius) (sin(x1) * sin(x2) + cos(x1) * cos(x2) * cos(y1 - y2)) ;
		}
		
		
	}
	
		

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-04 23:57:46.874
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-04 23:57:46.876
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-04 23:57:49.415
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter side of hexagon : ");
//		double s = sc.nextDouble();
//		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"\n");
//		
//		
//		
//    }
//		public static double areaOfHexagon(double s)
//		{
//			
//			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
//			
//		}
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the latitude of cordianate 1 : ");
		double lat1 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 1 : ");
		double long1 = sc.nextDouble();
		System.out.println("Enter the latitude of cordianate 2 : ");
		double lat2 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 2 : ");
		double long2 = sc.nextDouble();
		
		System.out.println("The distance between two points of earth is : " + );
		
		public static double distance_Between_LatLong() {
			lat1 = Math.toRadians(lat1);
			long1 = Math.toRadians(long1);
			lat2 = Math.toRadians(lat2);
			long2 = Math.toRadians(long2);
			double radius = 6371.01;
			return   radius * Math.acos() (sin(x1) * sin(x2) + cos(x1) * cos(x2) * cos(y1 - y2)) ;
		}
		
		
	}
	
		

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-04 23:57:49.418
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-04 23:57:49.420
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-04 23:57:50.796
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter side of hexagon : ");
//		double s = sc.nextDouble();
//		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"\n");
//		
//		
//		
//    }
//		public static double areaOfHexagon(double s)
//		{
//			
//			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
//			
//		}
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the latitude of cordianate 1 : ");
		double lat1 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 1 : ");
		double long1 = sc.nextDouble();
		System.out.println("Enter the latitude of cordianate 2 : ");
		double lat2 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 2 : ");
		double long2 = sc.nextDouble();
		
		System.out.println("The distance between two points of earth is : " + );
		
		public static double distance_Between_LatLong() {
			lat1 = Math.toRadians(lat1);
			long1 = Math.toRadians(long1);
			lat2 = Math.toRadians(lat2);
			long2 = Math.toRadians(long2);
			double radius = 6371.01;
			return   radius * Math.acos() (sin(x1) * sin(x2) + cos(x1) * cos(x2) * cos(y1 - y2)) ;
		}
		
		
	}
	
		

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-04 23:57:50.799
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-04 23:57:50.801
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-04 23:57:51.979
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter side of hexagon : ");
//		double s = sc.nextDouble();
//		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"\n");
//		
//		
//		
//    }
//		public static double areaOfHexagon(double s)
//		{
//			
//			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
//			
//		}
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the latitude of cordianate 1 : ");
		double lat1 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 1 : ");
		double long1 = sc.nextDouble();
		System.out.println("Enter the latitude of cordianate 2 : ");
		double lat2 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 2 : ");
		double long2 = sc.nextDouble();
		
		System.out.println("The distance between two points of earth is : " + );
		
		public static double distance_Between_LatLong() {
			lat1 = Math.toRadians(lat1);
			long1 = Math.toRadians(long1);
			lat2 = Math.toRadians(lat2);
			long2 = Math.toRadians(long2);
			double radius = 6371.01;
			return   radius * Math.acos() (sin(x1) * sin(x2) + cos(x1) * cos(x2) * cos(y1 - y2)) ;
		}
		
		
	}
	
		

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-04 23:57:51.982
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-04 23:57:51.983
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-04 23:57:53.306
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter side of hexagon : ");
//		double s = sc.nextDouble();
//		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"\n");
//		
//		
//		
//    }
//		public static double areaOfHexagon(double s)
//		{
//			
//			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
//			
//		}
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the latitude of cordianate 1 : ");
		double lat1 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 1 : ");
		double long1 = sc.nextDouble();
		System.out.println("Enter the latitude of cordianate 2 : ");
		double lat2 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 2 : ");
		double long2 = sc.nextDouble();
		
		System.out.println("The distance between two points of earth is : " + );
		
		public static double distance_Between_LatLong() {
			lat1 = Math.toRadians(lat1);
			long1 = Math.toRadians(long1);
			lat2 = Math.toRadians(lat2);
			long2 = Math.toRadians(long2);
			double radius = 6371.01;
			return   radius * Math.acos() (sin(x1) * sin(x2) + cos(x1) * cos(x2) * cos(y1 - y2)) ;
		}
		
		
	}
	
		

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-04 23:57:53.308
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-04 23:57:53.310
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-04 23:57:57.530
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.*;
public class Fundamentals_Coding_Questns {

	private static final double  r = 7.5;
	public static void main(String[] args) {
		
//1.	System.out.println("Hello \nJohn Smith");
		// Taking input from user 
	/*	Scanner scn = new Scanner(System.in);
		System.out.println("Enter First name :");
		String fname = scn.next();
		System.out.println("Enter last name :");
		String lname = scn.next();
		System.out.println("Hello\n"+fname+"  "+lname);*/
//----------------------------------------------------------------------
//	2.  Sum of two numbers
//		System.out.println(12+13);
		// Taking input from user
	/* Scanner scn = new Scanner(System.in);
		System.out.println("Input first number :");
		int num1 = scn.nextInt();
		System.out.println("Input second number :'");
		int num2 = scn.nextInt();
		int sum = num1 +num2;
		System.out.println("Sum of 2 number is :"+sum);*/
//------------------------------------------------------------------------------
//	3.  Divide 2 numbers
//		System.out.println(23/5); // returns Quotient and int type
//		Scanner scn = new Scanner(System.in);
//		System.out.println("Enter first number :");
//		int num1 = scn.nextInt();
//		System.out.println("Enter second number :");
//		int num2 = scn.nextInt();
//		int quot = num1/num2;
//		System.out.println("Divisor quotnt is :" +quot);
		
//	4.  result of following operations

//		System.out.println(-5 + 8 * 6);
//		System.out.println((55+9) % 9);
//		System.out.println(20 + -3*5 / 8);
//		
		
//		int x= -5 + 8 * 6 ;
//		
//		int y= (55+9) % 9;
//		int z = (20 + -3*5 / 8);
//		int a= (5 + 15 / 3 * 2 - 8 % 3);
//		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		5. Takes 2 no and prints sum of these 2 number
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input number 1st :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2nd : ");
//		int num2 = sc.nextInt();
//		int sum = num1 + num2;
//		System.out.println("Sum of 2 no i.e." + num1 +" & " + num2 + " is := " +sum);
//		
//		5. 5. Takes 2 no and prints product of these 2 number
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input no 1 :");
//		int num1 = sc.nextInt();
//		System.out.println("Input number 2 : ");
//		int num2 = sc.nextInt();
////		int prod = num1 * num2;
////		System.out.println(num1 +" & "+num2 + " is = " +prod);
//		System.out.println("Product of " +num1 +" & "+ num2 + " is : " + num1 * num2);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Input 1st number : ");
//		int num1 = sc.nextInt();
//		System.out.println("Input 2nd Number : ");
//		int num2 = sc.nextInt();
//		System.out.println("Substraction of " + num1 + " & " +num2 + "is :" + (num1 - num2) );
//		System.out.println("Addition of " + num1 + " & " +num2 + "is :" + (num1 + num2));
//		System.out.println("Multliplication of " + num1 + " & " +num2 + "is :" + (num1 * num2));
//		System.out.println("Division of " + num1 + " & " +num2 + "is :" + (num1 / num2));
//		System.out.println("Remainder of " + num1 + " & " +num2 + "is :" + (num1 % num2));
		
//		int sum = num1 + num2 ;
//		int Minus = num1 - num2 ;
//		int Multiply = num1 * num2 ;
//		int Division = num1 / num2 ;
//		int moduloReaminder = num1 % num2 ;
//		System.out.printf("Sum is = %d", sum);
		
//		 7 table  of 8
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter a number : ");
//		int x = sc.nextInt(); 
//		int n= 10;
//		for(int i=0; i<=n ; i++)
//		{
//		System.out.println(x + " X "+ n + " = "+ (x * n));
//		}
		
		
//		 Scanner sc = new Scanner(System.in);
//	       System.out.println("Enter a number : ");
//	       int x = sc.nextInt();
//	       for(int i=1;i<=10; i++)
//	       {
//	           System.out.println(x+"X"+i+"="+(x*i));
//	       }
//		
//		9. ((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5))
//		System.out.println(((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)));
//		double x =((25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5)) ;
//		System.out.println(x);
		
		
//		11.Perimeter and area of circle radius = 7.5cm
		
		
//		double r = 7.5;
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter radius :");
//		double r = sc.nextDouble();
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
		
//		double area = 3.14 * r * r;
//		double perimeter = 2 *3.14 * r;
//		System.out.println("Area is : " +area);
//		System.out.println("Perimeter is : " + perimeter);
		
//		double  area = Math.PI * r * r;
//		double perimeter  = 2 * Math.PI * r;
//		System.out.println(area);
//		System.out.println(perimeter);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter three number : ");
//		int x = sc.nextInt();
//		int y = sc.nextInt();
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the 1st number : ");
//		int x = sc.nextInt();
//		System.out.println("Enter the 2nd number : ");
//		int y = sc.nextInt();
//		System.out.println("Enter the 3rd number : ");
//		int z = sc.nextInt();
//		int avg = (x+y+z)/3;
//		System.out.println("Average of three no is :" + avg);
//		
//		13. Write a Java program to print the area and perimeter of a rectangle. Go to the editor
//		Test Data:
//		Width = 5.5 Height = 8.5
//
//		Expected Output
//		Area is 5.6 * 8.5 = 47.60
//		Perimeter is 2 * (5.6 + 8.5) = 28.20
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter width and length: ");
//		double width = sc.nextDouble();
//		double length = sc.nextDouble();
//		double Area = length * width;
//		double perimeter = 2*(length+width);
//		System.out.println("Area of rectangle is :" + Area);
//		System.out.println("Perimeter of rectangle is :" + perimeter);
		
		
//		System.out.println("* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\r\n"
//				+ "* * * * * * ==================================\r\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ " * * * * *  ==================================\n"
//				+ "* * * * * * ==================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================\n"
//				+ "==============================================");
//		System.out.println("Please see this flag: this is USA flag");
		
//	String  ch = "* * ";
//	String ee = "==";
//	for(int k=0;k<=8;k++) {
//		for(int i=0; i<=8; i++)
//		{
//			System.out.print(ch);
//	
//		}
//		for(int j=0; j<=24; j++)
//		{
//			System.out.print(ee);
//		}
//		System.out.println("\n");
//			
//	}
//	for(int n=0;n<=8;n++)
//	{
//		for(int l=0; l<=42; l++)
//		{
//			System.out.print(ee);
//			
//		}
//		System.out.println("\n");
//	}
//		
		
		
//		String p1= "* * * * * *  ==================================\n * * * * * * ==================================";
//		String p2 ="===============================================";
//		for(int i=0;i<=3;i++) {
//			System.out.println(p1);
//		}
//		System.out.println("* * * * * *  ==================================");
//		for(int i=0;i<=8;i++)
//		{
//			System.out.println(p2);
//		}
//		Swapping of two values 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter two value for swapping : ");
//		int a = sc.nextInt(); // 10 //2
//		int b = sc.nextInt(); // 5 // 8
//		System.out.println("Before swapping value of  A and B is : "+a+" "+b);
//		
//		a = a+b; // 15
//		b = a-b; // 10
//		a = a-b; // 5
//		
//		
//		System.out.println("A="+a+"&"+"B="+b);
		
//		int a, b, temp;
//		 a= 10;
//		 b= -23;
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 temp = a;
//		 a = b;
//		 b = temp;
//		 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
		 
//		 Scanner sc = new Scanner(System.in);
//		 System.out.println("Enter value of A nad B for swaping : ");
//		 int a = sc.nextInt();
//		 int b = sc.nextInt();
//		 System.out.println("Before swapping a is  : " + a + " and B is : " + b);
//		 int temp = a;
//		 a = b;
//		 b = temp;
//  	 System.out.println("After swapping A is : " + a + " and B is : " + b);
		
//		System.out.println(" +\"\"\"\"\"+ "); 
//		System.out.println("[| o o |] ");
//		System.out.println(" |  ^  | ");
//		System.out.println(" | '-' | ");
//		System.out.println(" +-----+");
		
//		String [] arr = new String[5];
//		arr[0] = " +\"\"\"\"\"+";	
//		arr[1] = "[| o o |] ";
//		arr[2] = " |  ^  |";
//		arr[3] = " | '-' |";
//		arr[4] = " +-----+";
//		for(int i=0; i<5; i++)
//		{
//			System.out.println(arr[i]);
//		}
		
		

//		
//		System.out.println("Java Version : " + System.getProperty("java.version"));
//		System.out.println("Java Runtime Version : " + System.getProperty("java.runtime.version"));
//		System.out.println("Java Home: "+ System.getProperty("java.home"));
//		System.out.println("Java Vendor: " + System.getProperty("java.vendor"));
//		System.out.println("Java Vendor URL: "+ System.getProperty("java.vendor.url"));
//		System.out.println("Java Class Path: "+ System.getProperty("java.class.path"));
		
//		Compare two number 
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// sirf if me saari condition check hogi.
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else if(input1 >= input2) {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
		
		// if    else-if me ek hi codition execute hogi chare rest waali sahi kyo na ho
		
		
//		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter input 1 :");
//		int input1 = sc.nextInt();
//		System.out.println("Enter input 2 :");
//		int input2 = sc.nextInt();
//		
//		if(input1 == input2)
//		{
//			System.out.printf("%d == %d\n",input1,input2);
//		}
//		else if(input1 <= input2 ) {
//			System.out.printf("%d <= %d\n ", input1, input2);
//		}
//		else if(input1 != input2)
//		{
//			System.out.printf("%d != %d\n ", input1, input2);
//		}
//		else if(input1 < input2) {
//			System.out.printf("%d < %d\n ", input1, input2);
//		}
//		
//		else if(input1 > input2) {
//			System.out.printf("%d > %d\n ", input1, input2);
//		}
//		else {
//			System.out.printf("%d >= %d ", input1, input2);
//		}
//		
		 
		// if else-if else me sirf ek hi condition execute hogi atlan ek hi 
		// condition/statement ka output milega aur jo pahle mil jaegi baaki 
		// rest neeche ya baad ki check hi nahi hogi uar na hi execute hogi.
		
//		int x = 20;
//		System.out.println(x /=10);
//		System.out.println(x /= 5);
//		System.out.println(x /=3);
//		System.out.println(x /= 20);
//		System.out.println(x = x/ 5);
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Please enter your number: ");
//		long  n = sc.nextLong();
//		System.out.println("The sum of number is : " +sumDigits(n) );
//				
//		
//	}
//	public static int sumDigits(long n) {
//        int sum = 0;
//        while (n != 0) {
//            sum += n % 10; // 23/10 = 3rm
//            n =n/ 10; // 23/10 = 2
//        }
//        return sum;
		
		
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter side of hexagon : ");
//		double s = sc.nextDouble();
//		System.out.println("Area of hexagon is : " + areaOfHexagon(s)+"\n");
//		
//		
//		
//    }
//		public static double areaOfHexagon(double s)
//		{
//			
//			return (6* s * s)/(4* Math.tan(Math.PI/6)) ;
//			
//		}
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the latitude of cordianate 1 : ");
		double lat1 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 1 : ");
		double long1 = sc.nextDouble();
		System.out.println("Enter the latitude of cordianate 2 : ");
		double lat2 = sc.nextDouble();
		System.out.println("Enter the longitude of cordianate 2 : ");
		double long2 = sc.nextDouble();
		
		System.out.println("The distance between two points of earth is : " + );
		
		public static double distance_Between_LatLong() {
			lat1 = Math.toRadians(lat1);
			long1 = Math.toRadians(long1);
			lat2 = Math.toRadians(lat2);
			long2 = Math.toRadians(long2);
			double radius = 6371.01;
			return   radius * Math.acos() (sin(x1) * sin(x2) + cos(x1) * cos(x2) * cos(y1 - y2)) ;
		}
		
		
	}
	
		

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-04 23:57:57.532
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-04 23:57:57.533
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
!SESSION 2022-11-13 10:54:36.199 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-11-13 10:54:46.551
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-13 10:54:46.551
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4e8afdad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-13 10:54:46.551
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4ec8d9b2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-13 10:54:56.247
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-11-14 23:11:58.897 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-11-14 23:12:06.789
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-14 23:12:06.789
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-14 23:12:06.789
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4ec8d9b2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57b63253,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-14 23:12:14.577
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.core.resources 4 2 2022-11-14 23:13:22.183
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.isActive()" because "this.fThread" is null
	at org.eclipse.jface.text.reconciler.AbstractReconciler.forceReconciling(AbstractReconciler.java:547)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.forceReconciling(JavaReconciler.java:388)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler$ResourceChangeListener.resourceChanged(JavaReconciler.java:238)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:305)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:295)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:158)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:381)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1503)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:175)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:251)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2022-11-21 15:44:38.019 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-11-21 15:44:52.489
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-21 15:44:52.489
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3de88f64,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4e8afdad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-21 15:44:52.489
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-21 15:45:06.793
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-11-21 23:23:32.611 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-11-21 23:23:42.428
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-21 23:23:42.429
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48d5ca17,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@226e07e7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-21 23:23:42.429
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7c31e410,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@9880a15,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-21 23:23:56.967
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-11-30 13:30:20.980 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-11-30 13:30:29.514
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-30 13:30:29.514
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62b786dc,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7ba1cdbe,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-30 13:30:29.514
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48d5ca17,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@226e07e7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-30 13:30:37.863
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-06 23:21:44.398 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-06 23:21:55.785
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-06 23:21:55.785
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62b786dc,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7ba1cdbe,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-06 23:21:55.785
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48d5ca17,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@226e07e7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-06 23:22:05.008
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-07 22:40:25.219 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-07 22:40:39.282
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-07 22:40:39.282
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-07 22:40:39.282
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4ec8d9b2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57b63253,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-07 22:40:48.618
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-14 13:12:26.523 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-14 13:12:37.975
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-14 13:12:37.975
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-14 13:12:37.975
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4ec8d9b2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57b63253,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-14 13:12:50.625
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:26.108
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 3276)
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 16:58:26.112
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 16:58:26.113
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:26.151
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 3276)
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 16:58:26.153
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 16:58:26.155
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:26.761
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 32767)
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 16:58:26.763
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 16:58:26.765
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:27.122
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 32767)
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 16:58:27.124
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 16:58:27.125
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:34.140
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 32767)  
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 16:58:34.142
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 16:58:34.144
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:34.154
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 32767)  
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 16:58:34.156
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 16:58:34.158
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:37.157
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 1
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 16:58:37.159
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 16:58:37.160
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:37.169
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 1
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 16:58:37.171
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 16:58:37.172
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:37.214
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 1
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 16:58:37.216
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 16:58:37.218
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:39.670
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 16:58:39.671
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 16:58:39.672
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 16:58:39.680
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
		
	
		
			
		
		
		 
	}

}
/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 16:58:39.682
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 16:58:39.683
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:01.507
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 21)
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 17:06:01.509
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 17:06:01.510
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:01.517
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 21)
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 17:06:01.519
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 17:06:01.520
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:05.524
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 214748)
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 17:06:05.526
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 17:06:05.528
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:05.539
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 214748)
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 17:06:05.541
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 17:06:05.543
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:09.546
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 17:06:09.548
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 17:06:09.549
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:09.560
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 17:06:09.562
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 17:06:09.564
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:11.636
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 17:06:11.638
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 17:06:11.639
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:12.562
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)  
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 17:06:12.564
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 17:06:12.565
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:12.573
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)  
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 17:06:12.574
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 17:06:12.576
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:18.078
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)  4 byte 
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 17:06:18.079
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 17:06:18.080
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:18.090
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)  4 byte 
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 17:06:18.092
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 17:06:18.093
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:21.092
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)  4 byte = 32 bits
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 17:06:21.094
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 17:06:21.095
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:06:21.105
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)  4 byte = 32 bits
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
			
		
		
		 
	}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 17:06:21.106
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 17:06:21.108
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2022-12-15 23:47:05.265 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-15 23:47:20.022
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-15 23:47:20.022
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3de88f64,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4e8afdad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-15 23:47:20.022
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-15 23:47:35.624
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-16 10:58:08.993 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-16 10:58:17.578
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-16 10:58:17.578
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-16 10:58:17.579
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4ec8d9b2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57b63253,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-16 10:58:25.550
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-17 14:41:23.929 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-17 14:41:38.482
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-17 14:41:38.482
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4e8afdad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-17 14:41:38.482
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4ec8d9b2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-17 14:41:52.237
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-18 10:51:36.709 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-18 10:51:51.071
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-18 10:51:51.071
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-18 10:51:51.071
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4ec8d9b2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57b63253,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-18 10:52:05.418
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2022-12-18 11:26:06.576
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
//		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
//		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)  4 byte = 32 bits
		
//		int x = -2147483648;
//		System.out.println(x);
		
//		int x = 2147483647;
//		System.out.println(x);
	
//		Note : Every integarl number by default going to be considered  as int type. So, error in int will be different.
		
//		int x = 2147483648;
//		System.out.println(x);  Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
//								The literal 2147483648 of type int is out of range : means integer ki range se bahar hai
		
//		int x = 2147483648l;  // treated as long : special case
//		System.out.println(x); Type mismatch: cannot convert from long to int
		
//		long x = 2147483648; // The literal 2147483648 of type int is out of range 
//		System.out.print(x);
		
//		long l = 2147483647;
//		System.out.print(l); // but treated as int not long one.
		
//		long x =  2147483648l;
//		System.out.print(x);
		
//		int x = true;
//		System.out.println(x); Type mismatch: cannot convert from boolean to int
		
//		4. Long : 
//			Range (-2^63 to 2^63-1) 8 bytes = 64 bits
//		long l = 2147483647;
//		long l1 = 2147483647l;
//		System.out.println(l);
//		System.out.print(l1);
		
//		long l = 12209342084092184901284091284298429849249249249292929239218989128921892189; // The literal 12209342084092184901284091284298429849249249249292929239218989128921892189 of type int is out of range 
//		System.out.println(l);
		
//		long l2 = 1220934208409999999l;
//		System.out.println(l2);
		
//		long l = 12209342084092184901284091284298429849249249249292929239218989128921892189l; // The literal 12209342084092184901284091284298429849249249249292929239218989128921892189l of type long is out of range 
//		System.out.print(l);
		
//		long l = 1073741824l;
//		long l1 = 1152921504606846976l;
//		long l3 = 8l;
//		long mull = (l1*l3);  // -9223372036854775808
////		long mul = (l*l);
//		System.out.print(mull);
		
//		FLOATING POINT DATA TYPES : 1. FLOAT  2. DOUBLE
		
//		1. Float 
//		 5 to 6 didgits accuracy.
//		single precision
//		size : 4 bytes = 32 bits
//		 range : (1.7 * 10^38 to ) -3.4 e^38 to 3.4e^38
		
//		float f = 12f;
//		float fn = 29/7; //  4.0
//		System.out.println(fn);
//		float f = 1234/232;
//		System.out.println(f); // 5.0
		
//		2. Double 
//		 14 to 15 digits accuracy
//		 double precision
//		 size 8 bytes = 64bits
//		 range : -1.7e^308 to 1.7e^308 
		
//		double d = 29.121313;
//		
//		System.out.println(d);
		
//		double d = 1212323.2321321;
//		System.out.println(d);
		
		
//		Non Numeric data type.
//		Boolean 
//		SIze : N.A (size depends upon machine only)
//		Range : N.A (true/false only allowed value)
		
//		boolean b = true;
//		boolean b1 = 0; // Type mismatch: cannot convert from int to boolean
//		System.out.println(b1); 
//		 boolean b = True; // True cannot be resolved to a variable
//		 System.out.println(b);
		
//		boolean b = s; // s cannot be resolved to a variable
//		System.out.println(b);
		
//		boolean b = 'A'; // Type mismatch: cannot convert from char to boolean
//		System.out.println(b);
		
//		boolean b = "String"; Type mismatch: cannot convert from String to boolean
//		System.out.println(b);
//		
		
		
		
//		int x = 0;
//		if(x) // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hello");
//		}else
//		{
//			System.out.println("Hii");
//		}
//		
//		while(1)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.print("Hello");
//			
//		}
		
//		2. Char 
//		Size - 2 byte = 16 bit
//		Range - (0 to 65535)	
		
		
//		char ch = null;
//		System.out.println(ch); // Type mismatch: cannot convert from null to char
//	
//		LITERALS 
		
//		int x = 19;  19 is literal/constant value
		
//		Decimal literals 
//		int x = 10; // by default decimal
//		int x1 = 010; // here 0 means octal
//		int x2 = 0x10; // here 0x means hexadecimal
//		System.out.println(x);  10
//		System.out.println(x1); 8
//		System.out.println(x2); 16
		
//		int x = 0X10;
//		System.out.println(x); // 16  from a to f java is not case sensitive. we can use both caps and small letter to represent number in hexa deciaml vale.
		
//		int x =0x1021a;
//		System.out.println(x);
		
//		int x = 0x00112abcdfe; // The literal 0x00112abcdfe of type int is out of range
//		System.out.println(x);
		
//		long l = 0x00112abcdefl;
//		System.out.print(l);
		
//		int x = 0212132137;
//		System.out.println(x);
//		
//		int x1 = 0786;  // The literal 0786 of type int is out of range 
//		System.out.println(x1);
		
//		int x = 00023327;
//		System.out.println(x);
			
//		int x = 001234567012;
//		System.out.println(x);
		
		
//		int x = 017777777777;
//		System.out.println(x); // 2147483647
		
//		int y = 0177777777777;
//		System.out.print(y); // The literal 0177777777777 of type int is out of range
		
//		
//		int  x= 0XFace;
//		System.out.println(x);
//		int x = 0XBeef;
////		int x = 0xBeer; // Syntax error on token "r", delete this token
//		System.out.print(x);
		
//		int x = 10;
//		int y = 010;
//		int  z = 0x10;
//		System.out.println(x+".."+y+".."+z); // 10..8..16
		
		
//		int x = 10l;
//		int y = 010l;
//		int z = 0x10l;
//		System.out.println(x+".."+y+".."+z); 
//		Type mismatch: cannot convert from long to int
//		Type mismatch: cannot convert from long to int
//		Type mismatch: cannot convert from long to int
		
		
//		long l1 = 10;
//		long l2 = 010;
//		long l3 = 0x10;
//		System.out.println(l1+".."+l2+".."+l3); // 10..8..16
		
		
//		byte b = 127;
//		byte b = 128;
//		System.out.println(b);
//		
//		short s = 32767;
////		short s = 32768; // Type mismatch: cannot convert from int to short
//		System.out.println(s);
//		
		
		
//		FLOATING POINT LITERALS.
//		
//		float f = 123.567; // Type mismatch: cannot convert from double to float
//		System.out.print(f);
//		
//		double d = 123.456;
//		System.out.print(d);
		
//		float f = 123.456f;
//		float f = 123.456F;
//		System.out.print(f); // 123.456
		
////		double d = 123.456d;
//		double d = 123.456D;
//		System.out.print(d);
		
//		float f = 123.456d;
//		System.out.print(f); // 	Type mismatch: cannot convert from double to float
		
		
//		double d = 123.456;
//		double d = 0123.456; // it is decimal literal but not ocatal literal.
//		double d = 0x123.456; // Invalid hex literal number
//		System.out.print(d);
		
//		double d = 0786; // The literal 0786 of type int is out of range 
//
//		System.out.println(d);
		
//		double d = 0786.0;
//		System.out.print(d);  // 786.0
		
//		double d = 0xFace;
//		double d = 0786.0;
//		System.out.println(d);
		
//		double d = 0xFace.0; // Invalid hex literal number
//		double d1 = 10;
//		double d2 = 0777;
////		System.out.println(d);
//		System.out.println(d1);
//		System.out.println(d2); // 511.0
		
//		int x = 10.0;
//		System.out.print(x); // Type mismatch: cannot convert from double to int
		
//		FLoating point literal in exponential form
		
//		double d = 1.2e3;
//		System.out.println(d); // 1200.0
		
//		float f = 1.2e3;
//		System.out.println(f); // Type mismatch: cannot convert from double to float  size means byte ka lafda hai.. from double 8 byte to float 4 byte.

//		float f = 1.2e3f;
//		float f = 1.2e3F;
//		System.out.print(f); // 1200.0
		
		
//		Non-Numeric  literal
//		1.Boolean  true/false
//		2. Char
//		
//		boolean b = true;
//		System.out.println(b);
//		boolean b = 0;
//		boolean b1 = True;
//		boolean b2 = "True";
////		System.out.println(b);  // Type mismatch: cannot convert from int to boolean
////		System.out.println(b1); //  True cannot be resolved to a variable
//		System.out.println(b2); // Type mismatch: cannot convert from String to boolean
		
//		int x = 0;
//		if(x)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hii..");
//		}
//		else 
//		{
//			System.out.println("Hello..");
//		}

		
//		
//		while(1)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hello..");
//		}
//		
		
//		Char literal :
		
//		char ch = 'a';
//		System.out.println(ch);
		
//		char ch = a;
//		System.out.println(ch); // a cannot be resolved to a variable
		
//		char ch = "a"; // Type mismatch: cannot convert from String to char
//		char ch = 'ab';  //Invalid character constant
//		System.out.println(ch);
		
//		char ch = 0;
//		char ch = 97; // a
//		char ch = 0xFace; // ?means no value exist corresponding to this unicode value in this machine.
//		char ch = 0XFace; // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 0XFACE;  // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 0777; // ?means no value exist corresponding to this unicode value in this machine.
//		char ch = 65535; // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 65536; // Type mismatch: cannot convert from int to char
//		System.out.println(ch);
		
//		char ch = '/u0061'; //Invalid character constant
//		System.out.println(ch);
//		
////		char ch = 97; // a
//		char ch = 197; // A
////		System.out.println(ch);
//		System.out.println(ch);
//		
//		char ch = 1970;
//		System.out.println(ch); // ?
		
//		char ch = 1971; // ?
//		char ch = 19710; // ?
//		System.out.println(ch);
		
//		Every escape character is a valid escape character 
		
//		char ch = '\n';
//		char ch = '\t';
//		char ch = '\m'; // Invalid escape sequence (valid ones are  \b  \t  \n  \f  \r  \"  \'  \\ )
//		System.out.println(ch);
		
//		char ch = '\n'; // new line
//		char ch1 = '\t';// horizontal tab
//		char ch2 = '\r';  // carriage return
//		char ch3 = '\b';  //  back space
//		char ch4 = '\f';  //  form feed
//		char ch5 = '\"'; // " double quote
//		char ch6 = '\'';  // ' single quote
//		char ch7 = '\\';// \ back slash symbol
//		System.out.println(ch); // new line
//		System.out.println(ch1); // horizontal tab
//		System.out.println(ch2); // carriage return
//		System.out.println(ch3); //  back space
//		System.out.println(ch4); //  form feed
//		System.out.println(ch5); // " double quote
//		System.out.println(ch6); // ' single quote
//		System.out.println(ch7); // \ back slash symbol
		
//		System.out.println("This is a \' single quote sysmbol");
//		System.out.println("This is a \" double quote symbol  ");
//		System.out.println("this is a \\ back slash symbol ");
		
//		System.out.println("this is file path C:\\\\ durga.classess "); // this is file path C:\\ durga.classess 
		
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
		
//		STRING LITERAL
		
//		Any sequence of character within double quote is treated as literal.
		
//		int x = 0b1111;
//		int x = 0B1111;
//		int x = 0b001;
//		int x = 0b011;
//		int x = 0b010;
//		System.out.println(x);
		
//		int y = 0b111; // Binary - 0b - 0,1 - but works on 1.7vrsn or above.
//		int z = 010;   // octal - 0 - 0-7
//		int x = 0x100; // hexa - 0x -0-9 10=a to15=f
//		int c = 10; // decimal - 0-9
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(x);
//		System.out.println(c);
		
		
////		usage of underscore symbol -it can be used between only digits.
//		
//		double d = 1234.456;
//		double d2 = 1_2_3_4.4_5_6;
//		System.out.println(d); // 1234.456
//		System.out.println(d2);  // 1234.456
		
//		double d = _123.456; // _123 cannot be resolved to a variable
//		double d = 123_.349;  // Underscores have to be located within digits
//		double d = 123_._234; // Underscores have to be located within digits
//		double d = 123_.23323_; // Underscores have to be located within digits
//		System.out.println(d);
		
//		float f = 10l;  // Exceptional case  need to study further
//		System.out.println(f);
		
		
		

		
//		float f = 10000l;
//		System.out.println(f);
		
		
//		byte b = 10;
//		short s = 20;
//		int x = 10;
//		long l = 200l;
//		long sum = b + s+x+l;
//		System.out.println("Sum = "+ sum);
		
//		short s = 10.5;
//		System.out.println(s);
		
		
//		ARRAYS
//		 An array is a indexed collection of fixed no of homogeneous data elements
		
//		int x =10;
//		int [] x = new int[10];
//	 Three type of array declaration
		
//		1_Dimensional array declaration.
//		2-D Array.
//		3-D Array.
		
//		1-D Array declaration.
		
//	int[]  x; // recommended because name is clearly seperate from type.
//		
//		int  []x; // here  int is array type. and X is name of array.  [] - this bracket represent  symbol/dimension.
//		int   x[];
//		
//		int[6]  x;  //  Unresolved compilation problem: 
//		System.out.println(x);  // Syntax error on token "6", delete this token
 //		int[] x;  // at the time of declaration we can't specify the the size of the array.
//		System.out.println(x);
		
//		2-D Array declaration.
//		
//		int[][]  x;
//		int  [][]x;
//		int  x[][];
//		
//		
//		int[]   []x;
//		int[]    x[];
//		int     []x[];  all are valid.
		
//		conclusion/concept regarding dimension:
		
//		int[]  a,b;  // a=1,b=1
//		int[]  a[],b; // a=2, b=1
//		int[]  a[],b[]; // a=2,b=2
//		int[]  []a,b;   // []  []  this space is ignored by compiler.  a=2,b=2
//		
//		int[]  []a,b[]; // a=2,b=3
//		int[]  []a,[]b;  // a=2, but b is not valid. CE:
		
//		if you want to declare the dimension before the variable, then this rule will applicable only for the first variable in a declaration.
//		(of 2-D array). not for the second variable. If we will try to apply for next/onwards/remaining variable the we will get CTE.
		
//		int[]  []a[]b,[]c; // a=2, b=error, c=error
		
//		3-D Array
//		
//		int[][][]   a;
//		int		[][][]a;
//		int		a[][][];
//		int[]	[][]a;
//		int[]	a[][];
//		int[]	[]a[];
//		int[][]	 []a;
//		int[][]	 a[];
//		int		[][]a[];
//		int 	[]a[][];  /// all are valid
//		
		
//		Conclusion: AT the time of decalration we cant specify the size of array.
//		To represent dimension before the variable this rule is applicable only for the first variable not for second and so on.
		
//		Array Creation
		
//		every array in java is object only hence we can create array by using new keyword/operator only.
		
//		int[]  a = new  int[3];  ==> 1-D Array
		
		
//		int = data type
//		[] = dimension & array symbol
//		a = reference variable/ name of array
//		new = reserved keyword use for creating object
//		[3] = 3 => size of array
		
//		usually we can create object only for classess, so that every array type corresponding classes will be there.
//		every array type correspond classess are there but these classesa are only available at language level not for programmer level.
		
//		To see the class:
//			sops(a.getClass().getName());
		
//		int[] a = new int[9];
//		System.out.println(a.getClass().getName());  // [I
//		
//		byte[] a = new byte[9];
//		System.out.println(a.getClass().getName()); // [B
//		System.out.println(a); // [B@2c7b84de
//////		
//		short[] s = new short[9];
////	System.out.println(s.getClass().getName()); // [S
//		System.out.println(s);  // [S@2c7b84de

////		
//		long[] l = new long[7];
////		System.out.println(l.getClass().getName()); // [J
//		System.out.println(l); // [J@2c7b84de
////		
//		float[] f = new float[9];
////		System.out.println(f.getClass().getName()); // [F
//		System.out.println(f);  // [F@3fee733d
////		
//		double[] d= new double[9];
////		System.out.println(d.getClass().getName()); // [D
//		System.out.println(d); // [D@5acf9800
		
//		
//		boolean[] b = new boolean[9];
//		System.out.println(b); // [Z@2c7b84de
//		System.out.println(b.getClass().getName()); // [Z
		
		
//		char[] c = new char[9];
//		System.out.println(c);
//		System.out.println(c.getClass().getName()); // [C
//		
		
//		2-D Array
//		int[][]  a = new int[9][7];
//		System.out.println(a.getClass().getName()); // [[I
		
//		byte[][] b = new byte[4][9];
//		System.out.println(b.getClass().getName()); // [[B
//		
//		short[][] s = new short[8][2];
//		System.out.println(s.getClass().getName()); // [[S
//		
//		long[][] l = new long[9][3];
//		System.out.println(l.getClass().getName()); // [[J
		
//		
//		float[][] f = new float[9][9];
//		System.out.println(f.getClass().getName()); // [[F
//		
//		double[][] d = new double[9][8];
//		System.out.println(d.getClass().getName()); // [[D
//		
//		boolean[][] b = new boolean[1][3];
//		System.out.println(b.getClass().getName()); // [[Z
//		
//		char[][]  c= new char[2][3];
//		System.out.println(c.getClass().getName()); // [[C
		
		
//		Loophole related to array cretion
		
		
//		1.At the time of array creatin compulsory we should specify the size of array otherwise we will get CTE
//		int[] x = new int[];
//		System.out.println(x); // Variable must provide either dimension expressions or an array initializer
		
		
//		int [] x = new int[9];
//		System.out.println(x);  // [I@2c7b84de
		
//		int[] x = new int[0]; // 2.it is legal to have array with size 0 in java
		
//	    3. if we are trying to specify some negative value then it will get some RTE. say: NegativeArraySizeException
		
//		int[] x = new int[-9];
//		System.out.println(x);  // Exception in thread "main" java.lang.NegativeArraySizeException: -9
		
//		Because the job of compiler is to check whether we are applying the size to array or not either its +ve or -ve doesn't matter.
//		 along with that it is int value or not..along sign =ve and -ve are not checked by compiler.
//		and at runtime JVM reserved the memory for size of array when JVM see +ve and -ve size/sign then through RE.
		
//		To specify array size the allowed datat types are in java is onlt byte, short,int,char
		
//		if we trying to apply any other datat type  then we will get CTE. because maximum allowed size  in array is only 2147483647 which is int maximum value.
		
//		So that data type which can implicitly converted into int type are only allowed.
		
//		int [] x = new int[2147483647];
//		System.out.println(x);  // Exception in thread "main" java.lang.OutOfMemoryError: Requested array size exceeds VM limit.
		Even in this first case we will get RTE if sufficient heap memory is not available in our machine/VM
		
		
		
		
		
		
		
//		
		
		
		
		
		
		
		

		
//		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-18 11:26:06.582
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-18 11:26:06.584
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-18 11:26:06.615
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
//		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
//		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)  4 byte = 32 bits
		
//		int x = -2147483648;
//		System.out.println(x);
		
//		int x = 2147483647;
//		System.out.println(x);
	
//		Note : Every integarl number by default going to be considered  as int type. So, error in int will be different.
		
//		int x = 2147483648;
//		System.out.println(x);  Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
//								The literal 2147483648 of type int is out of range : means integer ki range se bahar hai
		
//		int x = 2147483648l;  // treated as long : special case
//		System.out.println(x); Type mismatch: cannot convert from long to int
		
//		long x = 2147483648; // The literal 2147483648 of type int is out of range 
//		System.out.print(x);
		
//		long l = 2147483647;
//		System.out.print(l); // but treated as int not long one.
		
//		long x =  2147483648l;
//		System.out.print(x);
		
//		int x = true;
//		System.out.println(x); Type mismatch: cannot convert from boolean to int
		
//		4. Long : 
//			Range (-2^63 to 2^63-1) 8 bytes = 64 bits
//		long l = 2147483647;
//		long l1 = 2147483647l;
//		System.out.println(l);
//		System.out.print(l1);
		
//		long l = 12209342084092184901284091284298429849249249249292929239218989128921892189; // The literal 12209342084092184901284091284298429849249249249292929239218989128921892189 of type int is out of range 
//		System.out.println(l);
		
//		long l2 = 1220934208409999999l;
//		System.out.println(l2);
		
//		long l = 12209342084092184901284091284298429849249249249292929239218989128921892189l; // The literal 12209342084092184901284091284298429849249249249292929239218989128921892189l of type long is out of range 
//		System.out.print(l);
		
//		long l = 1073741824l;
//		long l1 = 1152921504606846976l;
//		long l3 = 8l;
//		long mull = (l1*l3);  // -9223372036854775808
////		long mul = (l*l);
//		System.out.print(mull);
		
//		FLOATING POINT DATA TYPES : 1. FLOAT  2. DOUBLE
		
//		1. Float 
//		 5 to 6 didgits accuracy.
//		single precision
//		size : 4 bytes = 32 bits
//		 range : (1.7 * 10^38 to ) -3.4 e^38 to 3.4e^38
		
//		float f = 12f;
//		float fn = 29/7; //  4.0
//		System.out.println(fn);
//		float f = 1234/232;
//		System.out.println(f); // 5.0
		
//		2. Double 
//		 14 to 15 digits accuracy
//		 double precision
//		 size 8 bytes = 64bits
//		 range : -1.7e^308 to 1.7e^308 
		
//		double d = 29.121313;
//		
//		System.out.println(d);
		
//		double d = 1212323.2321321;
//		System.out.println(d);
		
		
//		Non Numeric data type.
//		Boolean 
//		SIze : N.A (size depends upon machine only)
//		Range : N.A (true/false only allowed value)
		
//		boolean b = true;
//		boolean b1 = 0; // Type mismatch: cannot convert from int to boolean
//		System.out.println(b1); 
//		 boolean b = True; // True cannot be resolved to a variable
//		 System.out.println(b);
		
//		boolean b = s; // s cannot be resolved to a variable
//		System.out.println(b);
		
//		boolean b = 'A'; // Type mismatch: cannot convert from char to boolean
//		System.out.println(b);
		
//		boolean b = "String"; Type mismatch: cannot convert from String to boolean
//		System.out.println(b);
//		
		
		
		
//		int x = 0;
//		if(x) // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hello");
//		}else
//		{
//			System.out.println("Hii");
//		}
//		
//		while(1)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.print("Hello");
//			
//		}
		
//		2. Char 
//		Size - 2 byte = 16 bit
//		Range - (0 to 65535)	
		
		
//		char ch = null;
//		System.out.println(ch); // Type mismatch: cannot convert from null to char
//	
//		LITERALS 
		
//		int x = 19;  19 is literal/constant value
		
//		Decimal literals 
//		int x = 10; // by default decimal
//		int x1 = 010; // here 0 means octal
//		int x2 = 0x10; // here 0x means hexadecimal
//		System.out.println(x);  10
//		System.out.println(x1); 8
//		System.out.println(x2); 16
		
//		int x = 0X10;
//		System.out.println(x); // 16  from a to f java is not case sensitive. we can use both caps and small letter to represent number in hexa deciaml vale.
		
//		int x =0x1021a;
//		System.out.println(x);
		
//		int x = 0x00112abcdfe; // The literal 0x00112abcdfe of type int is out of range
//		System.out.println(x);
		
//		long l = 0x00112abcdefl;
//		System.out.print(l);
		
//		int x = 0212132137;
//		System.out.println(x);
//		
//		int x1 = 0786;  // The literal 0786 of type int is out of range 
//		System.out.println(x1);
		
//		int x = 00023327;
//		System.out.println(x);
			
//		int x = 001234567012;
//		System.out.println(x);
		
		
//		int x = 017777777777;
//		System.out.println(x); // 2147483647
		
//		int y = 0177777777777;
//		System.out.print(y); // The literal 0177777777777 of type int is out of range
		
//		
//		int  x= 0XFace;
//		System.out.println(x);
//		int x = 0XBeef;
////		int x = 0xBeer; // Syntax error on token "r", delete this token
//		System.out.print(x);
		
//		int x = 10;
//		int y = 010;
//		int  z = 0x10;
//		System.out.println(x+".."+y+".."+z); // 10..8..16
		
		
//		int x = 10l;
//		int y = 010l;
//		int z = 0x10l;
//		System.out.println(x+".."+y+".."+z); 
//		Type mismatch: cannot convert from long to int
//		Type mismatch: cannot convert from long to int
//		Type mismatch: cannot convert from long to int
		
		
//		long l1 = 10;
//		long l2 = 010;
//		long l3 = 0x10;
//		System.out.println(l1+".."+l2+".."+l3); // 10..8..16
		
		
//		byte b = 127;
//		byte b = 128;
//		System.out.println(b);
//		
//		short s = 32767;
////		short s = 32768; // Type mismatch: cannot convert from int to short
//		System.out.println(s);
//		
		
		
//		FLOATING POINT LITERALS.
//		
//		float f = 123.567; // Type mismatch: cannot convert from double to float
//		System.out.print(f);
//		
//		double d = 123.456;
//		System.out.print(d);
		
//		float f = 123.456f;
//		float f = 123.456F;
//		System.out.print(f); // 123.456
		
////		double d = 123.456d;
//		double d = 123.456D;
//		System.out.print(d);
		
//		float f = 123.456d;
//		System.out.print(f); // 	Type mismatch: cannot convert from double to float
		
		
//		double d = 123.456;
//		double d = 0123.456; // it is decimal literal but not ocatal literal.
//		double d = 0x123.456; // Invalid hex literal number
//		System.out.print(d);
		
//		double d = 0786; // The literal 0786 of type int is out of range 
//
//		System.out.println(d);
		
//		double d = 0786.0;
//		System.out.print(d);  // 786.0
		
//		double d = 0xFace;
//		double d = 0786.0;
//		System.out.println(d);
		
//		double d = 0xFace.0; // Invalid hex literal number
//		double d1 = 10;
//		double d2 = 0777;
////		System.out.println(d);
//		System.out.println(d1);
//		System.out.println(d2); // 511.0
		
//		int x = 10.0;
//		System.out.print(x); // Type mismatch: cannot convert from double to int
		
//		FLoating point literal in exponential form
		
//		double d = 1.2e3;
//		System.out.println(d); // 1200.0
		
//		float f = 1.2e3;
//		System.out.println(f); // Type mismatch: cannot convert from double to float  size means byte ka lafda hai.. from double 8 byte to float 4 byte.

//		float f = 1.2e3f;
//		float f = 1.2e3F;
//		System.out.print(f); // 1200.0
		
		
//		Non-Numeric  literal
//		1.Boolean  true/false
//		2. Char
//		
//		boolean b = true;
//		System.out.println(b);
//		boolean b = 0;
//		boolean b1 = True;
//		boolean b2 = "True";
////		System.out.println(b);  // Type mismatch: cannot convert from int to boolean
////		System.out.println(b1); //  True cannot be resolved to a variable
//		System.out.println(b2); // Type mismatch: cannot convert from String to boolean
		
//		int x = 0;
//		if(x)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hii..");
//		}
//		else 
//		{
//			System.out.println("Hello..");
//		}

		
//		
//		while(1)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hello..");
//		}
//		
		
//		Char literal :
		
//		char ch = 'a';
//		System.out.println(ch);
		
//		char ch = a;
//		System.out.println(ch); // a cannot be resolved to a variable
		
//		char ch = "a"; // Type mismatch: cannot convert from String to char
//		char ch = 'ab';  //Invalid character constant
//		System.out.println(ch);
		
//		char ch = 0;
//		char ch = 97; // a
//		char ch = 0xFace; // ?means no value exist corresponding to this unicode value in this machine.
//		char ch = 0XFace; // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 0XFACE;  // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 0777; // ?means no value exist corresponding to this unicode value in this machine.
//		char ch = 65535; // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 65536; // Type mismatch: cannot convert from int to char
//		System.out.println(ch);
		
//		char ch = '/u0061'; //Invalid character constant
//		System.out.println(ch);
//		
////		char ch = 97; // a
//		char ch = 197; // A
////		System.out.println(ch);
//		System.out.println(ch);
//		
//		char ch = 1970;
//		System.out.println(ch); // ?
		
//		char ch = 1971; // ?
//		char ch = 19710; // ?
//		System.out.println(ch);
		
//		Every escape character is a valid escape character 
		
//		char ch = '\n';
//		char ch = '\t';
//		char ch = '\m'; // Invalid escape sequence (valid ones are  \b  \t  \n  \f  \r  \"  \'  \\ )
//		System.out.println(ch);
		
//		char ch = '\n'; // new line
//		char ch1 = '\t';// horizontal tab
//		char ch2 = '\r';  // carriage return
//		char ch3 = '\b';  //  back space
//		char ch4 = '\f';  //  form feed
//		char ch5 = '\"'; // " double quote
//		char ch6 = '\'';  // ' single quote
//		char ch7 = '\\';// \ back slash symbol
//		System.out.println(ch); // new line
//		System.out.println(ch1); // horizontal tab
//		System.out.println(ch2); // carriage return
//		System.out.println(ch3); //  back space
//		System.out.println(ch4); //  form feed
//		System.out.println(ch5); // " double quote
//		System.out.println(ch6); // ' single quote
//		System.out.println(ch7); // \ back slash symbol
		
//		System.out.println("This is a \' single quote sysmbol");
//		System.out.println("This is a \" double quote symbol  ");
//		System.out.println("this is a \\ back slash symbol ");
		
//		System.out.println("this is file path C:\\\\ durga.classess "); // this is file path C:\\ durga.classess 
		
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
		
//		STRING LITERAL
		
//		Any sequence of character within double quote is treated as literal.
		
//		int x = 0b1111;
//		int x = 0B1111;
//		int x = 0b001;
//		int x = 0b011;
//		int x = 0b010;
//		System.out.println(x);
		
//		int y = 0b111; // Binary - 0b - 0,1 - but works on 1.7vrsn or above.
//		int z = 010;   // octal - 0 - 0-7
//		int x = 0x100; // hexa - 0x -0-9 10=a to15=f
//		int c = 10; // decimal - 0-9
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(x);
//		System.out.println(c);
		
		
////		usage of underscore symbol -it can be used between only digits.
//		
//		double d = 1234.456;
//		double d2 = 1_2_3_4.4_5_6;
//		System.out.println(d); // 1234.456
//		System.out.println(d2);  // 1234.456
		
//		double d = _123.456; // _123 cannot be resolved to a variable
//		double d = 123_.349;  // Underscores have to be located within digits
//		double d = 123_._234; // Underscores have to be located within digits
//		double d = 123_.23323_; // Underscores have to be located within digits
//		System.out.println(d);
		
//		float f = 10l;  // Exceptional case  need to study further
//		System.out.println(f);
		
		
		

		
//		float f = 10000l;
//		System.out.println(f);
		
		
//		byte b = 10;
//		short s = 20;
//		int x = 10;
//		long l = 200l;
//		long sum = b + s+x+l;
//		System.out.println("Sum = "+ sum);
		
//		short s = 10.5;
//		System.out.println(s);
		
		
//		ARRAYS
//		 An array is a indexed collection of fixed no of homogeneous data elements
		
//		int x =10;
//		int [] x = new int[10];
//	 Three type of array declaration
		
//		1_Dimensional array declaration.
//		2-D Array.
//		3-D Array.
		
//		1-D Array declaration.
		
//	int[]  x; // recommended because name is clearly seperate from type.
//		
//		int  []x; // here  int is array type. and X is name of array.  [] - this bracket represent  symbol/dimension.
//		int   x[];
//		
//		int[6]  x;  //  Unresolved compilation problem: 
//		System.out.println(x);  // Syntax error on token "6", delete this token
 //		int[] x;  // at the time of declaration we can't specify the the size of the array.
//		System.out.println(x);
		
//		2-D Array declaration.
//		
//		int[][]  x;
//		int  [][]x;
//		int  x[][];
//		
//		
//		int[]   []x;
//		int[]    x[];
//		int     []x[];  all are valid.
		
//		conclusion/concept regarding dimension:
		
//		int[]  a,b;  // a=1,b=1
//		int[]  a[],b; // a=2, b=1
//		int[]  a[],b[]; // a=2,b=2
//		int[]  []a,b;   // []  []  this space is ignored by compiler.  a=2,b=2
//		
//		int[]  []a,b[]; // a=2,b=3
//		int[]  []a,[]b;  // a=2, but b is not valid. CE:
		
//		if you want to declare the dimension before the variable, then this rule will applicable only for the first variable in a declaration.
//		(of 2-D array). not for the second variable. If we will try to apply for next/onwards/remaining variable the we will get CTE.
		
//		int[]  []a[]b,[]c; // a=2, b=error, c=error
		
//		3-D Array
//		
//		int[][][]   a;
//		int		[][][]a;
//		int		a[][][];
//		int[]	[][]a;
//		int[]	a[][];
//		int[]	[]a[];
//		int[][]	 []a;
//		int[][]	 a[];
//		int		[][]a[];
//		int 	[]a[][];  /// all are valid
//		
		
//		Conclusion: AT the time of decalration we cant specify the size of array.
//		To represent dimension before the variable this rule is applicable only for the first variable not for second and so on.
		
//		Array Creation
		
//		every array in java is object only hence we can create array by using new keyword/operator only.
		
//		int[]  a = new  int[3];  ==> 1-D Array
		
		
//		int = data type
//		[] = dimension & array symbol
//		a = reference variable/ name of array
//		new = reserved keyword use for creating object
//		[3] = 3 => size of array
		
//		usually we can create object only for classess, so that every array type corresponding classes will be there.
//		every array type correspond classess are there but these classesa are only available at language level not for programmer level.
		
//		To see the class:
//			sops(a.getClass().getName());
		
//		int[] a = new int[9];
//		System.out.println(a.getClass().getName());  // [I
//		
//		byte[] a = new byte[9];
//		System.out.println(a.getClass().getName()); // [B
//		System.out.println(a); // [B@2c7b84de
//////		
//		short[] s = new short[9];
////	System.out.println(s.getClass().getName()); // [S
//		System.out.println(s);  // [S@2c7b84de

////		
//		long[] l = new long[7];
////		System.out.println(l.getClass().getName()); // [J
//		System.out.println(l); // [J@2c7b84de
////		
//		float[] f = new float[9];
////		System.out.println(f.getClass().getName()); // [F
//		System.out.println(f);  // [F@3fee733d
////		
//		double[] d= new double[9];
////		System.out.println(d.getClass().getName()); // [D
//		System.out.println(d); // [D@5acf9800
		
//		
//		boolean[] b = new boolean[9];
//		System.out.println(b); // [Z@2c7b84de
//		System.out.println(b.getClass().getName()); // [Z
		
		
//		char[] c = new char[9];
//		System.out.println(c);
//		System.out.println(c.getClass().getName()); // [C
//		
		
//		2-D Array
//		int[][]  a = new int[9][7];
//		System.out.println(a.getClass().getName()); // [[I
		
//		byte[][] b = new byte[4][9];
//		System.out.println(b.getClass().getName()); // [[B
//		
//		short[][] s = new short[8][2];
//		System.out.println(s.getClass().getName()); // [[S
//		
//		long[][] l = new long[9][3];
//		System.out.println(l.getClass().getName()); // [[J
		
//		
//		float[][] f = new float[9][9];
//		System.out.println(f.getClass().getName()); // [[F
//		
//		double[][] d = new double[9][8];
//		System.out.println(d.getClass().getName()); // [[D
//		
//		boolean[][] b = new boolean[1][3];
//		System.out.println(b.getClass().getName()); // [[Z
//		
//		char[][]  c= new char[2][3];
//		System.out.println(c.getClass().getName()); // [[C
		
		
//		Loophole related to array cretion
		
		
//		1.At the time of array creatin compulsory we should specify the size of array otherwise we will get CTE
//		int[] x = new int[];
//		System.out.println(x); // Variable must provide either dimension expressions or an array initializer
		
		
//		int [] x = new int[9];
//		System.out.println(x);  // [I@2c7b84de
		
//		int[] x = new int[0]; // 2.it is legal to have array with size 0 in java
		
//	    3. if we are trying to specify some negative value then it will get some RTE. say: NegativeArraySizeException
		
//		int[] x = new int[-9];
//		System.out.println(x);  // Exception in thread "main" java.lang.NegativeArraySizeException: -9
		
//		Because the job of compiler is to check whether we are applying the size to array or not either its +ve or -ve doesn't matter.
//		 along with that it is int value or not..along sign =ve and -ve are not checked by compiler.
//		and at runtime JVM reserved the memory for size of array when JVM see +ve and -ve size/sign then through RE.
		
//		To specify array size the allowed datat types are in java is onlt byte, short,int,char
		
//		if we trying to apply any other datat type  then we will get CTE. because maximum allowed size  in array is only 2147483647 which is int maximum value.
		
//		So that data type which can implicitly converted into int type are only allowed.
		
//		int [] x = new int[2147483647];
//		System.out.println(x);  // Exception in thread "main" java.lang.OutOfMemoryError: Requested array size exceeds VM limit.
		Even in this first case we will get RTE if sufficient heap memory is not available in our machine/VM
		
		
		
		
		
		
		
//		
		
		
		
		
		
		
		

		
//		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-18 11:26:06.623
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-18 11:26:06.627
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-18 11:26:16.635
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
//		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
//		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)  4 byte = 32 bits
		
//		int x = -2147483648;
//		System.out.println(x);
		
//		int x = 2147483647;
//		System.out.println(x);
	
//		Note : Every integarl number by default going to be considered  as int type. So, error in int will be different.
		
//		int x = 2147483648;
//		System.out.println(x);  Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
//								The literal 2147483648 of type int is out of range : means integer ki range se bahar hai
		
//		int x = 2147483648l;  // treated as long : special case
//		System.out.println(x); Type mismatch: cannot convert from long to int
		
//		long x = 2147483648; // The literal 2147483648 of type int is out of range 
//		System.out.print(x);
		
//		long l = 2147483647;
//		System.out.print(l); // but treated as int not long one.
		
//		long x =  2147483648l;
//		System.out.print(x);
		
//		int x = true;
//		System.out.println(x); Type mismatch: cannot convert from boolean to int
		
//		4. Long : 
//			Range (-2^63 to 2^63-1) 8 bytes = 64 bits
//		long l = 2147483647;
//		long l1 = 2147483647l;
//		System.out.println(l);
//		System.out.print(l1);
		
//		long l = 12209342084092184901284091284298429849249249249292929239218989128921892189; // The literal 12209342084092184901284091284298429849249249249292929239218989128921892189 of type int is out of range 
//		System.out.println(l);
		
//		long l2 = 1220934208409999999l;
//		System.out.println(l2);
		
//		long l = 12209342084092184901284091284298429849249249249292929239218989128921892189l; // The literal 12209342084092184901284091284298429849249249249292929239218989128921892189l of type long is out of range 
//		System.out.print(l);
		
//		long l = 1073741824l;
//		long l1 = 1152921504606846976l;
//		long l3 = 8l;
//		long mull = (l1*l3);  // -9223372036854775808
////		long mul = (l*l);
//		System.out.print(mull);
		
//		FLOATING POINT DATA TYPES : 1. FLOAT  2. DOUBLE
		
//		1. Float 
//		 5 to 6 didgits accuracy.
//		single precision
//		size : 4 bytes = 32 bits
//		 range : (1.7 * 10^38 to ) -3.4 e^38 to 3.4e^38
		
//		float f = 12f;
//		float fn = 29/7; //  4.0
//		System.out.println(fn);
//		float f = 1234/232;
//		System.out.println(f); // 5.0
		
//		2. Double 
//		 14 to 15 digits accuracy
//		 double precision
//		 size 8 bytes = 64bits
//		 range : -1.7e^308 to 1.7e^308 
		
//		double d = 29.121313;
//		
//		System.out.println(d);
		
//		double d = 1212323.2321321;
//		System.out.println(d);
		
		
//		Non Numeric data type.
//		Boolean 
//		SIze : N.A (size depends upon machine only)
//		Range : N.A (true/false only allowed value)
		
//		boolean b = true;
//		boolean b1 = 0; // Type mismatch: cannot convert from int to boolean
//		System.out.println(b1); 
//		 boolean b = True; // True cannot be resolved to a variable
//		 System.out.println(b);
		
//		boolean b = s; // s cannot be resolved to a variable
//		System.out.println(b);
		
//		boolean b = 'A'; // Type mismatch: cannot convert from char to boolean
//		System.out.println(b);
		
//		boolean b = "String"; Type mismatch: cannot convert from String to boolean
//		System.out.println(b);
//		
		
		
		
//		int x = 0;
//		if(x) // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hello");
//		}else
//		{
//			System.out.println("Hii");
//		}
//		
//		while(1)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.print("Hello");
//			
//		}
		
//		2. Char 
//		Size - 2 byte = 16 bit
//		Range - (0 to 65535)	
		
		
//		char ch = null;
//		System.out.println(ch); // Type mismatch: cannot convert from null to char
//	
//		LITERALS 
		
//		int x = 19;  19 is literal/constant value
		
//		Decimal literals 
//		int x = 10; // by default decimal
//		int x1 = 010; // here 0 means octal
//		int x2 = 0x10; // here 0x means hexadecimal
//		System.out.println(x);  10
//		System.out.println(x1); 8
//		System.out.println(x2); 16
		
//		int x = 0X10;
//		System.out.println(x); // 16  from a to f java is not case sensitive. we can use both caps and small letter to represent number in hexa deciaml vale.
		
//		int x =0x1021a;
//		System.out.println(x);
		
//		int x = 0x00112abcdfe; // The literal 0x00112abcdfe of type int is out of range
//		System.out.println(x);
		
//		long l = 0x00112abcdefl;
//		System.out.print(l);
		
//		int x = 0212132137;
//		System.out.println(x);
//		
//		int x1 = 0786;  // The literal 0786 of type int is out of range 
//		System.out.println(x1);
		
//		int x = 00023327;
//		System.out.println(x);
			
//		int x = 001234567012;
//		System.out.println(x);
		
		
//		int x = 017777777777;
//		System.out.println(x); // 2147483647
		
//		int y = 0177777777777;
//		System.out.print(y); // The literal 0177777777777 of type int is out of range
		
//		
//		int  x= 0XFace;
//		System.out.println(x);
//		int x = 0XBeef;
////		int x = 0xBeer; // Syntax error on token "r", delete this token
//		System.out.print(x);
		
//		int x = 10;
//		int y = 010;
//		int  z = 0x10;
//		System.out.println(x+".."+y+".."+z); // 10..8..16
		
		
//		int x = 10l;
//		int y = 010l;
//		int z = 0x10l;
//		System.out.println(x+".."+y+".."+z); 
//		Type mismatch: cannot convert from long to int
//		Type mismatch: cannot convert from long to int
//		Type mismatch: cannot convert from long to int
		
		
//		long l1 = 10;
//		long l2 = 010;
//		long l3 = 0x10;
//		System.out.println(l1+".."+l2+".."+l3); // 10..8..16
		
		
//		byte b = 127;
//		byte b = 128;
//		System.out.println(b);
//		
//		short s = 32767;
////		short s = 32768; // Type mismatch: cannot convert from int to short
//		System.out.println(s);
//		
		
		
//		FLOATING POINT LITERALS.
//		
//		float f = 123.567; // Type mismatch: cannot convert from double to float
//		System.out.print(f);
//		
//		double d = 123.456;
//		System.out.print(d);
		
//		float f = 123.456f;
//		float f = 123.456F;
//		System.out.print(f); // 123.456
		
////		double d = 123.456d;
//		double d = 123.456D;
//		System.out.print(d);
		
//		float f = 123.456d;
//		System.out.print(f); // 	Type mismatch: cannot convert from double to float
		
		
//		double d = 123.456;
//		double d = 0123.456; // it is decimal literal but not ocatal literal.
//		double d = 0x123.456; // Invalid hex literal number
//		System.out.print(d);
		
//		double d = 0786; // The literal 0786 of type int is out of range 
//
//		System.out.println(d);
		
//		double d = 0786.0;
//		System.out.print(d);  // 786.0
		
//		double d = 0xFace;
//		double d = 0786.0;
//		System.out.println(d);
		
//		double d = 0xFace.0; // Invalid hex literal number
//		double d1 = 10;
//		double d2 = 0777;
////		System.out.println(d);
//		System.out.println(d1);
//		System.out.println(d2); // 511.0
		
//		int x = 10.0;
//		System.out.print(x); // Type mismatch: cannot convert from double to int
		
//		FLoating point literal in exponential form
		
//		double d = 1.2e3;
//		System.out.println(d); // 1200.0
		
//		float f = 1.2e3;
//		System.out.println(f); // Type mismatch: cannot convert from double to float  size means byte ka lafda hai.. from double 8 byte to float 4 byte.

//		float f = 1.2e3f;
//		float f = 1.2e3F;
//		System.out.print(f); // 1200.0
		
		
//		Non-Numeric  literal
//		1.Boolean  true/false
//		2. Char
//		
//		boolean b = true;
//		System.out.println(b);
//		boolean b = 0;
//		boolean b1 = True;
//		boolean b2 = "True";
////		System.out.println(b);  // Type mismatch: cannot convert from int to boolean
////		System.out.println(b1); //  True cannot be resolved to a variable
//		System.out.println(b2); // Type mismatch: cannot convert from String to boolean
		
//		int x = 0;
//		if(x)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hii..");
//		}
//		else 
//		{
//			System.out.println("Hello..");
//		}

		
//		
//		while(1)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hello..");
//		}
//		
		
//		Char literal :
		
//		char ch = 'a';
//		System.out.println(ch);
		
//		char ch = a;
//		System.out.println(ch); // a cannot be resolved to a variable
		
//		char ch = "a"; // Type mismatch: cannot convert from String to char
//		char ch = 'ab';  //Invalid character constant
//		System.out.println(ch);
		
//		char ch = 0;
//		char ch = 97; // a
//		char ch = 0xFace; // ?means no value exist corresponding to this unicode value in this machine.
//		char ch = 0XFace; // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 0XFACE;  // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 0777; // ?means no value exist corresponding to this unicode value in this machine.
//		char ch = 65535; // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 65536; // Type mismatch: cannot convert from int to char
//		System.out.println(ch);
		
//		char ch = '/u0061'; //Invalid character constant
//		System.out.println(ch);
//		
////		char ch = 97; // a
//		char ch = 197; // A
////		System.out.println(ch);
//		System.out.println(ch);
//		
//		char ch = 1970;
//		System.out.println(ch); // ?
		
//		char ch = 1971; // ?
//		char ch = 19710; // ?
//		System.out.println(ch);
		
//		Every escape character is a valid escape character 
		
//		char ch = '\n';
//		char ch = '\t';
//		char ch = '\m'; // Invalid escape sequence (valid ones are  \b  \t  \n  \f  \r  \"  \'  \\ )
//		System.out.println(ch);
		
//		char ch = '\n'; // new line
//		char ch1 = '\t';// horizontal tab
//		char ch2 = '\r';  // carriage return
//		char ch3 = '\b';  //  back space
//		char ch4 = '\f';  //  form feed
//		char ch5 = '\"'; // " double quote
//		char ch6 = '\'';  // ' single quote
//		char ch7 = '\\';// \ back slash symbol
//		System.out.println(ch); // new line
//		System.out.println(ch1); // horizontal tab
//		System.out.println(ch2); // carriage return
//		System.out.println(ch3); //  back space
//		System.out.println(ch4); //  form feed
//		System.out.println(ch5); // " double quote
//		System.out.println(ch6); // ' single quote
//		System.out.println(ch7); // \ back slash symbol
		
//		System.out.println("This is a \' single quote sysmbol");
//		System.out.println("This is a \" double quote symbol  ");
//		System.out.println("this is a \\ back slash symbol ");
		
//		System.out.println("this is file path C:\\\\ durga.classess "); // this is file path C:\\ durga.classess 
		
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
		
//		STRING LITERAL
		
//		Any sequence of character within double quote is treated as literal.
		
//		int x = 0b1111;
//		int x = 0B1111;
//		int x = 0b001;
//		int x = 0b011;
//		int x = 0b010;
//		System.out.println(x);
		
//		int y = 0b111; // Binary - 0b - 0,1 - but works on 1.7vrsn or above.
//		int z = 010;   // octal - 0 - 0-7
//		int x = 0x100; // hexa - 0x -0-9 10=a to15=f
//		int c = 10; // decimal - 0-9
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(x);
//		System.out.println(c);
		
		
////		usage of underscore symbol -it can be used between only digits.
//		
//		double d = 1234.456;
//		double d2 = 1_2_3_4.4_5_6;
//		System.out.println(d); // 1234.456
//		System.out.println(d2);  // 1234.456
		
//		double d = _123.456; // _123 cannot be resolved to a variable
//		double d = 123_.349;  // Underscores have to be located within digits
//		double d = 123_._234; // Underscores have to be located within digits
//		double d = 123_.23323_; // Underscores have to be located within digits
//		System.out.println(d);
		
//		float f = 10l;  // Exceptional case  need to study further
//		System.out.println(f);
		
		
		

		
//		float f = 10000l;
//		System.out.println(f);
		
		
//		byte b = 10;
//		short s = 20;
//		int x = 10;
//		long l = 200l;
//		long sum = b + s+x+l;
//		System.out.println("Sum = "+ sum);
		
//		short s = 10.5;
//		System.out.println(s);
		
		
//		ARRAYS
//		 An array is a indexed collection of fixed no of homogeneous data elements
		
//		int x =10;
//		int [] x = new int[10];
//	 Three type of array declaration
		
//		1_Dimensional array declaration.
//		2-D Array.
//		3-D Array.
		
//		1-D Array declaration.
		
//	int[]  x; // recommended because name is clearly seperate from type.
//		
//		int  []x; // here  int is array type. and X is name of array.  [] - this bracket represent  symbol/dimension.
//		int   x[];
//		
//		int[6]  x;  //  Unresolved compilation problem: 
//		System.out.println(x);  // Syntax error on token "6", delete this token
 //		int[] x;  // at the time of declaration we can't specify the the size of the array.
//		System.out.println(x);
		
//		2-D Array declaration.
//		
//		int[][]  x;
//		int  [][]x;
//		int  x[][];
//		
//		
//		int[]   []x;
//		int[]    x[];
//		int     []x[];  all are valid.
		
//		conclusion/concept regarding dimension:
		
//		int[]  a,b;  // a=1,b=1
//		int[]  a[],b; // a=2, b=1
//		int[]  a[],b[]; // a=2,b=2
//		int[]  []a,b;   // []  []  this space is ignored by compiler.  a=2,b=2
//		
//		int[]  []a,b[]; // a=2,b=3
//		int[]  []a,[]b;  // a=2, but b is not valid. CE:
		
//		if you want to declare the dimension before the variable, then this rule will applicable only for the first variable in a declaration.
//		(of 2-D array). not for the second variable. If we will try to apply for next/onwards/remaining variable the we will get CTE.
		
//		int[]  []a[]b,[]c; // a=2, b=error, c=error
		
//		3-D Array
//		
//		int[][][]   a;
//		int		[][][]a;
//		int		a[][][];
//		int[]	[][]a;
//		int[]	a[][];
//		int[]	[]a[];
//		int[][]	 []a;
//		int[][]	 a[];
//		int		[][]a[];
//		int 	[]a[][];  /// all are valid
//		
		
//		Conclusion: AT the time of decalration we cant specify the size of array.
//		To represent dimension before the variable this rule is applicable only for the first variable not for second and so on.
		
//		Array Creation
		
//		every array in java is object only hence we can create array by using new keyword/operator only.
		
//		int[]  a = new  int[3];  ==> 1-D Array
		
		
//		int = data type
//		[] = dimension & array symbol
//		a = reference variable/ name of array
//		new = reserved keyword use for creating object
//		[3] = 3 => size of array
		
//		usually we can create object only for classess, so that every array type corresponding classes will be there.
//		every array type correspond classess are there but these classesa are only available at language level not for programmer level.
		
//		To see the class:
//			sops(a.getClass().getName());
		
//		int[] a = new int[9];
//		System.out.println(a.getClass().getName());  // [I
//		
//		byte[] a = new byte[9];
//		System.out.println(a.getClass().getName()); // [B
//		System.out.println(a); // [B@2c7b84de
//////		
//		short[] s = new short[9];
////	System.out.println(s.getClass().getName()); // [S
//		System.out.println(s);  // [S@2c7b84de

////		
//		long[] l = new long[7];
////		System.out.println(l.getClass().getName()); // [J
//		System.out.println(l); // [J@2c7b84de
////		
//		float[] f = new float[9];
////		System.out.println(f.getClass().getName()); // [F
//		System.out.println(f);  // [F@3fee733d
////		
//		double[] d= new double[9];
////		System.out.println(d.getClass().getName()); // [D
//		System.out.println(d); // [D@5acf9800
		
//		
//		boolean[] b = new boolean[9];
//		System.out.println(b); // [Z@2c7b84de
//		System.out.println(b.getClass().getName()); // [Z
		
		
//		char[] c = new char[9];
//		System.out.println(c);
//		System.out.println(c.getClass().getName()); // [C
//		
		
//		2-D Array
//		int[][]  a = new int[9][7];
//		System.out.println(a.getClass().getName()); // [[I
		
//		byte[][] b = new byte[4][9];
//		System.out.println(b.getClass().getName()); // [[B
//		
//		short[][] s = new short[8][2];
//		System.out.println(s.getClass().getName()); // [[S
//		
//		long[][] l = new long[9][3];
//		System.out.println(l.getClass().getName()); // [[J
		
//		
//		float[][] f = new float[9][9];
//		System.out.println(f.getClass().getName()); // [[F
//		
//		double[][] d = new double[9][8];
//		System.out.println(d.getClass().getName()); // [[D
//		
//		boolean[][] b = new boolean[1][3];
//		System.out.println(b.getClass().getName()); // [[Z
//		
//		char[][]  c= new char[2][3];
//		System.out.println(c.getClass().getName()); // [[C
		
		
//		Loophole related to array cretion
		
		
//		1.At the time of array creatin compulsory we should specify the size of array otherwise we will get CTE
//		int[] x = new int[];
//		System.out.println(x); // Variable must provide either dimension expressions or an array initializer
		
		
//		int [] x = new int[9];
//		System.out.println(x);  // [I@2c7b84de
		
//		int[] x = new int[0]; // 2.it is legal to have array with size 0 in java
		
//	    3. if we are trying to specify some negative value then it will get some RTE. say: NegativeArraySizeException
		
//		int[] x = new int[-9];
//		System.out.println(x);  // Exception in thread "main" java.lang.NegativeArraySizeException: -9
		
//		Because the job of compiler is to check whether we are applying the size to array or not either its +ve or -ve doesn't matter.
//		 along with that it is int value or not..along sign =ve and -ve are not checked by compiler.
//		and at runtime JVM reserved the memory for size of array when JVM see +ve and -ve size/sign then through RE.
		
//		To specify array size the allowed datat types are in java is onlt byte, short,int,char
		
//		if we trying to apply any other datat type  then we will get CTE. because maximum allowed size  in array is only 2147483647 which is int maximum value.
		
//		So that data type which can implicitly converted into int type are only allowed.
		
//		int [] x = new int[2147483647];
//		System.out.println(x);  // Exception in thread "main" java.lang.OutOfMemoryError: Requested array size exceeds VM limit.
		Even in this first case we will get RTE if sufficient heap memory is not available in our machine/VM.
		
		
		
		
		
		
		
//		
		
		
		
		
		
		
		

		
//		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-18 11:26:16.641
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-18 11:26:16.643
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-18 11:26:16.668
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Java_Fundamentals { // class name  : Java_Fundamentals

	public static void main(String[] args) { // method name : main  //predefined java class name : String // name of array : args
//		int x = 20;  // variable name : x
		
 // Topic 1. these all are identifiers. can be used for identification purpose
		
		// ex : int Number = 10;
		// int NUMBER = 10;
		// int number = 10;
		// all above line has different meaning.
//		int String = 344;
//		System.out.println(String);	// o/p: 344
		
//		int runnable = 900;
//		System.out.println(runnable); // o/p : 900
//		 int   total_number = 10;
//		 int 123_total = 40;
//		 int total_123 = 121;
		
//		int java2share = 10;
//		int total123 = 20;
////		int 123total = 50;
//		System.out.println(total123);
		
//		int _$_$_$_$_$_$_$ = 20;
//		int $_$_$_$ = 90;
//		System.out.println($_$_$_$);
//		
		
//		All WRAPPER CLASS/ PRE-DEFINED JAVA CLASS
//		int Integer = 29;
//		int Int = 30;
//		int String = 31;
//		int Char = 32;
//		int Float = 33;
//		int Double = 34;
//		int Long = 35;
//		int Short = 36;
//		int Byte = 37;
//		int Boolean = 38;
//		int Character = 39;
//		
//		System.out.println(Integer);    29   int
//		System.out.println(Int); 		30
//		System.out.println(String);		31   Non-Primitive
//		System.out.println(Char);		32
//		System.out.println(Float);		33  float
//		System.out.println(Double);		34  double
//		System.out.println(Long);		35  long
//		System.out.println(Short);		36  short
//		System.out.println(Byte);		37  byte
//		System.out.println(Boolean);	38  boolean
//		System.out.println(Character);	39  char  -- there is nothing exist like character
	
	

		
//		int int = 20;
//		int char = 21;
//		int float = 22;
//		int bool = 23;
//		int boolean = 25;
		/* int Boolean = 29; */
//		int byte = 24;
//		int short = 25;
//		int long = 26;
//		int double = 27;
//		int boolean = 28;
//		int char = 29;
		
//		System.out.println(int);
//		System.out.println(char);
//		System.out.println(float);
//		System.out.println(bool);
//		System.out.println(boolean);
		/* System.out.println(Boolean); */
//		System.out.println(byte);
//		System.out.println(short);
//		System.out.println(long);
//		System.out.println(double);
//		System.out.println(boolean);
//		System.out.println(char);
		
//		int character = 20;
//		System.out.println(character);
		
//	Topic 2 . Reserved words
		
//	Reserved keyword for Primitive DT	Non_Premitive DT/Wrapper class
		
//	1.	byte							Byte
//	2.	short							Short
//	3.	int								Integer
//	4.	long							Long
//		
//	5.	float 							Float
//	6.	double							Double
//		
//  7.	char							Character
//	8.	boolean							Boolean
	 
		
//		String are literal
		
//		Reserved words are 53 in java
//		resreved keyword are 50 - but 48 are used and rest 2 are unused- goto, const
//		reserved literals are 3  - true, false, null
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
//		
		
//		PRIMITVE DATA TYPE : Numeric DT -> Integral datatype
//		1 . Byte  Range (-128 to 127)  1 byte = 8 bit
		
//		byte x = 128;
//		byte y = 127;
//		byte z =-128;
//		byte a = -129;
////		System.out.println(x);
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(a);
		
//		Except boolean and char datatype all are sign data type because we can represent in both +ve and -ve value
		
//		byte b = 10.5;
//		System.out.println(b); Type mismatch: cannot convert from double to byte
//		byte b = true;
//		System.out.println(b); Type mismatch: cannot convert from boolean to byte
//		byte b = "fahad";
//		System.out.println(b); Type mismatch: cannot convert from String to byte
		
//		Two types of stream :
//		Character stream and byte stream
		
//		 2. Short  DT - most rarely used 
//		range (-2^15 to 2^15-1) (-32768 to 32767)  2 byte = 16 bit.
		
//		short s = 32767;
//		System.out.println(s);
//		
//		Short s = 32768;
//		System.out.println(s); Type mismatch: cannot convert from int to Short
		
//		short s = -32768;
//		System.out.println(s);
//		
//		short s = -32769;
//		System.out.println(s); Type mismatch: cannot convert from int to short
		
//		short s = 10.5;  
//		System.out.println(s); Type mismatch: cannot convert from double to short
		
//		short s = = true;
//		System.out.println(s);   Type mismatch: cannot convert from boolean to short
		
		
//		3. int data type 
//		range (-2^31 to 2^31-1) (-2147483648  to 2147483647)  4 byte = 32 bits
		
//		int x = -2147483648;
//		System.out.println(x);
		
//		int x = 2147483647;
//		System.out.println(x);
	
//		Note : Every integarl number by default going to be considered  as int type. So, error in int will be different.
		
//		int x = 2147483648;
//		System.out.println(x);  Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
//								The literal 2147483648 of type int is out of range : means integer ki range se bahar hai
		
//		int x = 2147483648l;  // treated as long : special case
//		System.out.println(x); Type mismatch: cannot convert from long to int
		
//		long x = 2147483648; // The literal 2147483648 of type int is out of range 
//		System.out.print(x);
		
//		long l = 2147483647;
//		System.out.print(l); // but treated as int not long one.
		
//		long x =  2147483648l;
//		System.out.print(x);
		
//		int x = true;
//		System.out.println(x); Type mismatch: cannot convert from boolean to int
		
//		4. Long : 
//			Range (-2^63 to 2^63-1) 8 bytes = 64 bits
//		long l = 2147483647;
//		long l1 = 2147483647l;
//		System.out.println(l);
//		System.out.print(l1);
		
//		long l = 12209342084092184901284091284298429849249249249292929239218989128921892189; // The literal 12209342084092184901284091284298429849249249249292929239218989128921892189 of type int is out of range 
//		System.out.println(l);
		
//		long l2 = 1220934208409999999l;
//		System.out.println(l2);
		
//		long l = 12209342084092184901284091284298429849249249249292929239218989128921892189l; // The literal 12209342084092184901284091284298429849249249249292929239218989128921892189l of type long is out of range 
//		System.out.print(l);
		
//		long l = 1073741824l;
//		long l1 = 1152921504606846976l;
//		long l3 = 8l;
//		long mull = (l1*l3);  // -9223372036854775808
////		long mul = (l*l);
//		System.out.print(mull);
		
//		FLOATING POINT DATA TYPES : 1. FLOAT  2. DOUBLE
		
//		1. Float 
//		 5 to 6 didgits accuracy.
//		single precision
//		size : 4 bytes = 32 bits
//		 range : (1.7 * 10^38 to ) -3.4 e^38 to 3.4e^38
		
//		float f = 12f;
//		float fn = 29/7; //  4.0
//		System.out.println(fn);
//		float f = 1234/232;
//		System.out.println(f); // 5.0
		
//		2. Double 
//		 14 to 15 digits accuracy
//		 double precision
//		 size 8 bytes = 64bits
//		 range : -1.7e^308 to 1.7e^308 
		
//		double d = 29.121313;
//		
//		System.out.println(d);
		
//		double d = 1212323.2321321;
//		System.out.println(d);
		
		
//		Non Numeric data type.
//		Boolean 
//		SIze : N.A (size depends upon machine only)
//		Range : N.A (true/false only allowed value)
		
//		boolean b = true;
//		boolean b1 = 0; // Type mismatch: cannot convert from int to boolean
//		System.out.println(b1); 
//		 boolean b = True; // True cannot be resolved to a variable
//		 System.out.println(b);
		
//		boolean b = s; // s cannot be resolved to a variable
//		System.out.println(b);
		
//		boolean b = 'A'; // Type mismatch: cannot convert from char to boolean
//		System.out.println(b);
		
//		boolean b = "String"; Type mismatch: cannot convert from String to boolean
//		System.out.println(b);
//		
		
		
		
//		int x = 0;
//		if(x) // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hello");
//		}else
//		{
//			System.out.println("Hii");
//		}
//		
//		while(1)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.print("Hello");
//			
//		}
		
//		2. Char 
//		Size - 2 byte = 16 bit
//		Range - (0 to 65535)	
		
		
//		char ch = null;
//		System.out.println(ch); // Type mismatch: cannot convert from null to char
//	
//		LITERALS 
		
//		int x = 19;  19 is literal/constant value
		
//		Decimal literals 
//		int x = 10; // by default decimal
//		int x1 = 010; // here 0 means octal
//		int x2 = 0x10; // here 0x means hexadecimal
//		System.out.println(x);  10
//		System.out.println(x1); 8
//		System.out.println(x2); 16
		
//		int x = 0X10;
//		System.out.println(x); // 16  from a to f java is not case sensitive. we can use both caps and small letter to represent number in hexa deciaml vale.
		
//		int x =0x1021a;
//		System.out.println(x);
		
//		int x = 0x00112abcdfe; // The literal 0x00112abcdfe of type int is out of range
//		System.out.println(x);
		
//		long l = 0x00112abcdefl;
//		System.out.print(l);
		
//		int x = 0212132137;
//		System.out.println(x);
//		
//		int x1 = 0786;  // The literal 0786 of type int is out of range 
//		System.out.println(x1);
		
//		int x = 00023327;
//		System.out.println(x);
			
//		int x = 001234567012;
//		System.out.println(x);
		
		
//		int x = 017777777777;
//		System.out.println(x); // 2147483647
		
//		int y = 0177777777777;
//		System.out.print(y); // The literal 0177777777777 of type int is out of range
		
//		
//		int  x= 0XFace;
//		System.out.println(x);
//		int x = 0XBeef;
////		int x = 0xBeer; // Syntax error on token "r", delete this token
//		System.out.print(x);
		
//		int x = 10;
//		int y = 010;
//		int  z = 0x10;
//		System.out.println(x+".."+y+".."+z); // 10..8..16
		
		
//		int x = 10l;
//		int y = 010l;
//		int z = 0x10l;
//		System.out.println(x+".."+y+".."+z); 
//		Type mismatch: cannot convert from long to int
//		Type mismatch: cannot convert from long to int
//		Type mismatch: cannot convert from long to int
		
		
//		long l1 = 10;
//		long l2 = 010;
//		long l3 = 0x10;
//		System.out.println(l1+".."+l2+".."+l3); // 10..8..16
		
		
//		byte b = 127;
//		byte b = 128;
//		System.out.println(b);
//		
//		short s = 32767;
////		short s = 32768; // Type mismatch: cannot convert from int to short
//		System.out.println(s);
//		
		
		
//		FLOATING POINT LITERALS.
//		
//		float f = 123.567; // Type mismatch: cannot convert from double to float
//		System.out.print(f);
//		
//		double d = 123.456;
//		System.out.print(d);
		
//		float f = 123.456f;
//		float f = 123.456F;
//		System.out.print(f); // 123.456
		
////		double d = 123.456d;
//		double d = 123.456D;
//		System.out.print(d);
		
//		float f = 123.456d;
//		System.out.print(f); // 	Type mismatch: cannot convert from double to float
		
		
//		double d = 123.456;
//		double d = 0123.456; // it is decimal literal but not ocatal literal.
//		double d = 0x123.456; // Invalid hex literal number
//		System.out.print(d);
		
//		double d = 0786; // The literal 0786 of type int is out of range 
//
//		System.out.println(d);
		
//		double d = 0786.0;
//		System.out.print(d);  // 786.0
		
//		double d = 0xFace;
//		double d = 0786.0;
//		System.out.println(d);
		
//		double d = 0xFace.0; // Invalid hex literal number
//		double d1 = 10;
//		double d2 = 0777;
////		System.out.println(d);
//		System.out.println(d1);
//		System.out.println(d2); // 511.0
		
//		int x = 10.0;
//		System.out.print(x); // Type mismatch: cannot convert from double to int
		
//		FLoating point literal in exponential form
		
//		double d = 1.2e3;
//		System.out.println(d); // 1200.0
		
//		float f = 1.2e3;
//		System.out.println(f); // Type mismatch: cannot convert from double to float  size means byte ka lafda hai.. from double 8 byte to float 4 byte.

//		float f = 1.2e3f;
//		float f = 1.2e3F;
//		System.out.print(f); // 1200.0
		
		
//		Non-Numeric  literal
//		1.Boolean  true/false
//		2. Char
//		
//		boolean b = true;
//		System.out.println(b);
//		boolean b = 0;
//		boolean b1 = True;
//		boolean b2 = "True";
////		System.out.println(b);  // Type mismatch: cannot convert from int to boolean
////		System.out.println(b1); //  True cannot be resolved to a variable
//		System.out.println(b2); // Type mismatch: cannot convert from String to boolean
		
//		int x = 0;
//		if(x)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hii..");
//		}
//		else 
//		{
//			System.out.println("Hello..");
//		}

		
//		
//		while(1)  // Type mismatch: cannot convert from int to boolean
//		{
//			System.out.println("Hello..");
//		}
//		
		
//		Char literal :
		
//		char ch = 'a';
//		System.out.println(ch);
		
//		char ch = a;
//		System.out.println(ch); // a cannot be resolved to a variable
		
//		char ch = "a"; // Type mismatch: cannot convert from String to char
//		char ch = 'ab';  //Invalid character constant
//		System.out.println(ch);
		
//		char ch = 0;
//		char ch = 97; // a
//		char ch = 0xFace; // ?means no value exist corresponding to this unicode value in this machine.
//		char ch = 0XFace; // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 0XFACE;  // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 0777; // ?means no value exist corresponding to this unicode value in this machine.
//		char ch = 65535; // ? means no value exist corresponding to this unicode value in this machine.
//		char ch = 65536; // Type mismatch: cannot convert from int to char
//		System.out.println(ch);
		
//		char ch = '/u0061'; //Invalid character constant
//		System.out.println(ch);
//		
////		char ch = 97; // a
//		char ch = 197; // A
////		System.out.println(ch);
//		System.out.println(ch);
//		
//		char ch = 1970;
//		System.out.println(ch); // ?
		
//		char ch = 1971; // ?
//		char ch = 19710; // ?
//		System.out.println(ch);
		
//		Every escape character is a valid escape character 
		
//		char ch = '\n';
//		char ch = '\t';
//		char ch = '\m'; // Invalid escape sequence (valid ones are  \b  \t  \n  \f  \r  \"  \'  \\ )
//		System.out.println(ch);
		
//		char ch = '\n'; // new line
//		char ch1 = '\t';// horizontal tab
//		char ch2 = '\r';  // carriage return
//		char ch3 = '\b';  //  back space
//		char ch4 = '\f';  //  form feed
//		char ch5 = '\"'; // " double quote
//		char ch6 = '\'';  // ' single quote
//		char ch7 = '\\';// \ back slash symbol
//		System.out.println(ch); // new line
//		System.out.println(ch1); // horizontal tab
//		System.out.println(ch2); // carriage return
//		System.out.println(ch3); //  back space
//		System.out.println(ch4); //  form feed
//		System.out.println(ch5); // " double quote
//		System.out.println(ch6); // ' single quote
//		System.out.println(ch7); // \ back slash symbol
		
//		System.out.println("This is a \' single quote sysmbol");
//		System.out.println("This is a \" double quote symbol  ");
//		System.out.println("this is a \\ back slash symbol ");
		
//		System.out.println("this is file path C:\\\\ durga.classess "); // this is file path C:\\ durga.classess 
		
		
		/*
		 *  Its never too late to start !!
		 *  This too shall pass !!
		 */		
		
//		STRING LITERAL
		
//		Any sequence of character within double quote is treated as literal.
		
//		int x = 0b1111;
//		int x = 0B1111;
//		int x = 0b001;
//		int x = 0b011;
//		int x = 0b010;
//		System.out.println(x);
		
//		int y = 0b111; // Binary - 0b - 0,1 - but works on 1.7vrsn or above.
//		int z = 010;   // octal - 0 - 0-7
//		int x = 0x100; // hexa - 0x -0-9 10=a to15=f
//		int c = 10; // decimal - 0-9
//		System.out.println(y);
//		System.out.println(z);
//		System.out.println(x);
//		System.out.println(c);
		
		
////		usage of underscore symbol -it can be used between only digits.
//		
//		double d = 1234.456;
//		double d2 = 1_2_3_4.4_5_6;
//		System.out.println(d); // 1234.456
//		System.out.println(d2);  // 1234.456
		
//		double d = _123.456; // _123 cannot be resolved to a variable
//		double d = 123_.349;  // Underscores have to be located within digits
//		double d = 123_._234; // Underscores have to be located within digits
//		double d = 123_.23323_; // Underscores have to be located within digits
//		System.out.println(d);
		
//		float f = 10l;  // Exceptional case  need to study further
//		System.out.println(f);
		
		
		

		
//		float f = 10000l;
//		System.out.println(f);
		
		
//		byte b = 10;
//		short s = 20;
//		int x = 10;
//		long l = 200l;
//		long sum = b + s+x+l;
//		System.out.println("Sum = "+ sum);
		
//		short s = 10.5;
//		System.out.println(s);
		
		
//		ARRAYS
//		 An array is a indexed collection of fixed no of homogeneous data elements
		
//		int x =10;
//		int [] x = new int[10];
//	 Three type of array declaration
		
//		1_Dimensional array declaration.
//		2-D Array.
//		3-D Array.
		
//		1-D Array declaration.
		
//	int[]  x; // recommended because name is clearly seperate from type.
//		
//		int  []x; // here  int is array type. and X is name of array.  [] - this bracket represent  symbol/dimension.
//		int   x[];
//		
//		int[6]  x;  //  Unresolved compilation problem: 
//		System.out.println(x);  // Syntax error on token "6", delete this token
 //		int[] x;  // at the time of declaration we can't specify the the size of the array.
//		System.out.println(x);
		
//		2-D Array declaration.
//		
//		int[][]  x;
//		int  [][]x;
//		int  x[][];
//		
//		
//		int[]   []x;
//		int[]    x[];
//		int     []x[];  all are valid.
		
//		conclusion/concept regarding dimension:
		
//		int[]  a,b;  // a=1,b=1
//		int[]  a[],b; // a=2, b=1
//		int[]  a[],b[]; // a=2,b=2
//		int[]  []a,b;   // []  []  this space is ignored by compiler.  a=2,b=2
//		
//		int[]  []a,b[]; // a=2,b=3
//		int[]  []a,[]b;  // a=2, but b is not valid. CE:
		
//		if you want to declare the dimension before the variable, then this rule will applicable only for the first variable in a declaration.
//		(of 2-D array). not for the second variable. If we will try to apply for next/onwards/remaining variable the we will get CTE.
		
//		int[]  []a[]b,[]c; // a=2, b=error, c=error
		
//		3-D Array
//		
//		int[][][]   a;
//		int		[][][]a;
//		int		a[][][];
//		int[]	[][]a;
//		int[]	a[][];
//		int[]	[]a[];
//		int[][]	 []a;
//		int[][]	 a[];
//		int		[][]a[];
//		int 	[]a[][];  /// all are valid
//		
		
//		Conclusion: AT the time of decalration we cant specify the size of array.
//		To represent dimension before the variable this rule is applicable only for the first variable not for second and so on.
		
//		Array Creation
		
//		every array in java is object only hence we can create array by using new keyword/operator only.
		
//		int[]  a = new  int[3];  ==> 1-D Array
		
		
//		int = data type
//		[] = dimension & array symbol
//		a = reference variable/ name of array
//		new = reserved keyword use for creating object
//		[3] = 3 => size of array
		
//		usually we can create object only for classess, so that every array type corresponding classes will be there.
//		every array type correspond classess are there but these classesa are only available at language level not for programmer level.
		
//		To see the class:
//			sops(a.getClass().getName());
		
//		int[] a = new int[9];
//		System.out.println(a.getClass().getName());  // [I
//		
//		byte[] a = new byte[9];
//		System.out.println(a.getClass().getName()); // [B
//		System.out.println(a); // [B@2c7b84de
//////		
//		short[] s = new short[9];
////	System.out.println(s.getClass().getName()); // [S
//		System.out.println(s);  // [S@2c7b84de

////		
//		long[] l = new long[7];
////		System.out.println(l.getClass().getName()); // [J
//		System.out.println(l); // [J@2c7b84de
////		
//		float[] f = new float[9];
////		System.out.println(f.getClass().getName()); // [F
//		System.out.println(f);  // [F@3fee733d
////		
//		double[] d= new double[9];
////		System.out.println(d.getClass().getName()); // [D
//		System.out.println(d); // [D@5acf9800
		
//		
//		boolean[] b = new boolean[9];
//		System.out.println(b); // [Z@2c7b84de
//		System.out.println(b.getClass().getName()); // [Z
		
		
//		char[] c = new char[9];
//		System.out.println(c);
//		System.out.println(c.getClass().getName()); // [C
//		
		
//		2-D Array
//		int[][]  a = new int[9][7];
//		System.out.println(a.getClass().getName()); // [[I
		
//		byte[][] b = new byte[4][9];
//		System.out.println(b.getClass().getName()); // [[B
//		
//		short[][] s = new short[8][2];
//		System.out.println(s.getClass().getName()); // [[S
//		
//		long[][] l = new long[9][3];
//		System.out.println(l.getClass().getName()); // [[J
		
//		
//		float[][] f = new float[9][9];
//		System.out.println(f.getClass().getName()); // [[F
//		
//		double[][] d = new double[9][8];
//		System.out.println(d.getClass().getName()); // [[D
//		
//		boolean[][] b = new boolean[1][3];
//		System.out.println(b.getClass().getName()); // [[Z
//		
//		char[][]  c= new char[2][3];
//		System.out.println(c.getClass().getName()); // [[C
		
		
//		Loophole related to array cretion
		
		
//		1.At the time of array creatin compulsory we should specify the size of array otherwise we will get CTE
//		int[] x = new int[];
//		System.out.println(x); // Variable must provide either dimension expressions or an array initializer
		
		
//		int [] x = new int[9];
//		System.out.println(x);  // [I@2c7b84de
		
//		int[] x = new int[0]; // 2.it is legal to have array with size 0 in java
		
//	    3. if we are trying to specify some negative value then it will get some RTE. say: NegativeArraySizeException
		
//		int[] x = new int[-9];
//		System.out.println(x);  // Exception in thread "main" java.lang.NegativeArraySizeException: -9
		
//		Because the job of compiler is to check whether we are applying the size to array or not either its +ve or -ve doesn't matter.
//		 along with that it is int value or not..along sign =ve and -ve are not checked by compiler.
//		and at runtime JVM reserved the memory for size of array when JVM see +ve and -ve size/sign then through RE.
		
//		To specify array size the allowed datat types are in java is onlt byte, short,int,char
		
//		if we trying to apply any other datat type  then we will get CTE. because maximum allowed size  in array is only 2147483647 which is int maximum value.
		
//		So that data type which can implicitly converted into int type are only allowed.
		
//		int [] x = new int[2147483647];
//		System.out.println(x);  // Exception in thread "main" java.lang.OutOfMemoryError: Requested array size exceeds VM limit.
		Even in this first case we will get RTE if sufficient heap memory is not available in our machine/VM.
		
		
		
		
		
		
		
//		
		
		
		
		
		
		
		

		
//		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		}

}






















































/*
 * java is case sensitive means caps and small letters have different meaning.
 * there is no limit for java identifiers. NOTE : we can't used reserved words
 * for java identifiers eg : if, else, for, while EXCEPTION : but but all
 * predefined java class name like WRAPPER CALSS- Integer but not int, String
 * but not char and interface name we can use as java identifier, but can't
 * recommended.
 * 
 * 
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-18 11:26:16.673
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-18 11:26:16.676
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2022-12-19 10:52:07.968 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-19 10:52:22.525
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-19 10:52:22.525
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3722f39d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-19 10:52:22.525
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4ec8d9b2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57b63253,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-19 10:52:36.198
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-20 10:41:36.778 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-20 10:41:50.906
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-20 10:41:50.906
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57b63253,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c0013b8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-20 10:41:50.906
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-20 10:42:06.423
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-21 11:20:34.657 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 2 10035 2022-12-21 11:20:38.877
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.jface 2 0 2022-12-21 11:20:43.342
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-21 11:20:43.342
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4c8d45cf,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@fde487b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-21 11:20:43.342
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4cc4d454,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3add5e17,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-21 11:20:52.136
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-27 23:52:48.119 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-27 23:52:56.708
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-27 23:52:56.708
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57b63253,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c0013b8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-27 23:52:56.708
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-27 23:53:05.244
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-01-02 11:27:16.140 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-01-02 11:27:24.638
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-01-02 11:27:24.638
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57b63253,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c0013b8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-01-02 11:27:24.638
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-01-02 11:27:33.381
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-01-03 12:28:33.233 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-01-03 12:28:41.570
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-01-03 12:28:41.570
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c0013b8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-01-03 12:28:41.570
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@42d174ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-01-03 12:28:49.519
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-02-06 23:10:58.186 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-02-06 23:11:08.020
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-06 23:11:08.020
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57b63253,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c0013b8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-06 23:11:08.020
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-06 23:11:16.793
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-02-07 09:48:25.451 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-02-07 09:48:33.231
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-07 09:48:33.231
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@65d90b7f,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2a42019a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-07 09:48:33.231
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6fc0e448,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@60194904,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-07 09:48:42.016
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-02-08 00:11:01.185 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-02-08 00:11:09.290
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-08 00:11:09.290
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c0013b8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-08 00:11:09.290
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@42d174ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-08 00:11:17.423
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-02-08 11:13:55.988 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-02-08 11:14:04.913
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-08 11:14:04.913
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-08 11:14:04.913
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@42d174ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4ec0229c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-08 11:14:13.477
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2023-02-08 16:09:33.082
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class OperatorsAndAssignment {

	public static void main(String[] args) {
//		Types of operators:-
//		1.Increment and decrement operators
//		2.Arithmetic operators
//		3.String concatenation operators
//		4.Relational operators
//		5.Equality operators
//		6.instanceOf operators
//		7.bitwise operators
//		8.short circuit operators
//		9.type cast operators
//		10.Assignment operators
//		11.conditional operators
//		12.new operators
//		13.[] operators
//		14.operator precedence
//		15.Evaluation order of operands
//		16.new vs newInstance()
//		17.instanceOf Vs isInstance()
//		18.ClassNotFoundException Vs NoClassDefFoundError

//		1. Increment & Decrement operators:-
//		Increment - Pre-Increment , y=++x;
//		Increment - Post-Increment, y=x++;
		
//		Decrement - Pre-Decrement , y=--x;
//		Decrement - Post-Decrement, y=x--;
		
//		int x = 10;
//		int y=++x; // Pre-Increment
//		int z =x++; // 11 // Post-Increment
//		System.out.println(y); // 11 - OP
//		System.out.println(z); // 11
//		int m =x++; // 11
//		System.out.println(m); // 11
		
//		int x=20;
//		int y= ++x; // Isi line me value incr ho gayi //Pre-Increment
//		System.out.println(y); // 21
//		System.out.println(x); // 21
		
//		int x= 30;
//		int y= x++; // Post-Increment
//		System.out.println(y); // 30 Post-Increment
//		System.out.println(x); // 31 Post-Increment
		
//		int y=20;
//		int x= --y; //Pre-Decrement
//		System.out.println(x); // 19 Pre-Decrement 
//		System.out.println(y); //19  Pre-Decrement
		
//		int z= 20;
//		int x= z--; // Post-Decrement
//		System.out.println(x); // 20 Post-Decrement
//		System.out.println(z); // 19 Post-Decrement
		
//		int x= 10;
//		int y = x++;
//		System.out.println(y); // 10
//		System.out.println(x);// 11
//		int z= --x;
//		System.out.println(z); // 10
//		We cant apply incremnt and decrement operators on constant values.
//		int x = 10;
//		int y = ++10;
//		System.out.println(y);// Unresolved compilation problem: 
		//Invalid argument to operation ++/--
//		Nesting of INC/DEC operators is not allowed
//		int x= 10;
//		int y= ++(++x);
//		System.out.println(y); // Unresolved compilation problem: 
		//Invalid argument to operation ++/--
//		For FINAL variables we cant apply incr/decr operators.
//		final int x = 10;
//		x++;// Unresolved compilation problem: 
//		int y= x++;// Unresolved compilation problem: 
//		System.out.println(y);// Unresolved compilation problem: 
		//The final local variable x cannot be assigned. It must be blank and not using a compound assignment
//		final int x =10;
//		x=11;// Unresolved compilation problem: 
//		System.out.println(x);// The final local variable x cannot be assigned. It must be blank and not using a compound assignment
//		int x = 10;
//		x++;
//		int y=x++;//10
//		System.out.println(y);// 11
//		System.out.println(x);// 12
//		int x = 10;
//		x++;
//		System.out.println(x);// 11
//		int y=x++;
//		System.out.println(y);// 11
//		System.out.println(x);// 12
//		System.out.println(y);// 11 // not clear with concepts.
//		char ch = 'a';
//		ch++;
//		int y= ch;
//		System.out.println(ch); // b
//		System.out.println(y); //98
//		double d = 10.5;
//		d++;
//		System.out.println(d);// 11.5
//		boolean b = true;
//		b++;
//		System.out.println(b);// Type mismatch: cannot convert from boolean to int
//		operator ++ can not applied to boolean
//		?We can apply inc/decr operators for eery primitive data type only except to boolean
//		5. Diff btwn B++ & b=b+1 //Date&Time=04:03PM,Wednesday,02/08/2023
//		If we applied any arithemetic operators between two variable a and b the the result type is always
//		max of (int,type of a, type of b)
//		byte a = 10;
//		byte b = 20;
//		byte c = a+b;
//		System.out.println(c);// Type mismatch: cannot convert from int to byte
//		we can solve/handle it by usinf type casting
//		byte c = (byte)(a+b);
//		System.out.println(c);// 30
//		byte b = 10;
//		b= b+1;// Type mismatch: cannot convert from int to byte
//		System.out.println(b);//Type mismatch: cannot convert from int to byte
//		byte b = 10;
//		b=(byte)(b+1);// using TypeCasting
//		System.out.println(b);// 11
//		
//		byte b = 10;
//		b++;// internal typecasting
//		System.out.println(b);// 11
//		NOTE:- In case of INcr/Decr internal TypeCasting perform automatically
//		
		
//		2.Arithmetic Opeartors:-(+,-,/,*,%)
		If we apply any arithmetic opearators between a&b 
		
		
		
		

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-08 16:09:33.088
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-08 16:09:33.090
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-08 16:09:33.104
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class OperatorsAndAssignment {

	public static void main(String[] args) {
//		Types of operators:-
//		1.Increment and decrement operators
//		2.Arithmetic operators
//		3.String concatenation operators
//		4.Relational operators
//		5.Equality operators
//		6.instanceOf operators
//		7.bitwise operators
//		8.short circuit operators
//		9.type cast operators
//		10.Assignment operators
//		11.conditional operators
//		12.new operators
//		13.[] operators
//		14.operator precedence
//		15.Evaluation order of operands
//		16.new vs newInstance()
//		17.instanceOf Vs isInstance()
//		18.ClassNotFoundException Vs NoClassDefFoundError

//		1. Increment & Decrement operators:-
//		Increment - Pre-Increment , y=++x;
//		Increment - Post-Increment, y=x++;
		
//		Decrement - Pre-Decrement , y=--x;
//		Decrement - Post-Decrement, y=x--;
		
//		int x = 10;
//		int y=++x; // Pre-Increment
//		int z =x++; // 11 // Post-Increment
//		System.out.println(y); // 11 - OP
//		System.out.println(z); // 11
//		int m =x++; // 11
//		System.out.println(m); // 11
		
//		int x=20;
//		int y= ++x; // Isi line me value incr ho gayi //Pre-Increment
//		System.out.println(y); // 21
//		System.out.println(x); // 21
		
//		int x= 30;
//		int y= x++; // Post-Increment
//		System.out.println(y); // 30 Post-Increment
//		System.out.println(x); // 31 Post-Increment
		
//		int y=20;
//		int x= --y; //Pre-Decrement
//		System.out.println(x); // 19 Pre-Decrement 
//		System.out.println(y); //19  Pre-Decrement
		
//		int z= 20;
//		int x= z--; // Post-Decrement
//		System.out.println(x); // 20 Post-Decrement
//		System.out.println(z); // 19 Post-Decrement
		
//		int x= 10;
//		int y = x++;
//		System.out.println(y); // 10
//		System.out.println(x);// 11
//		int z= --x;
//		System.out.println(z); // 10
//		We cant apply incremnt and decrement operators on constant values.
//		int x = 10;
//		int y = ++10;
//		System.out.println(y);// Unresolved compilation problem: 
		//Invalid argument to operation ++/--
//		Nesting of INC/DEC operators is not allowed
//		int x= 10;
//		int y= ++(++x);
//		System.out.println(y); // Unresolved compilation problem: 
		//Invalid argument to operation ++/--
//		For FINAL variables we cant apply incr/decr operators.
//		final int x = 10;
//		x++;// Unresolved compilation problem: 
//		int y= x++;// Unresolved compilation problem: 
//		System.out.println(y);// Unresolved compilation problem: 
		//The final local variable x cannot be assigned. It must be blank and not using a compound assignment
//		final int x =10;
//		x=11;// Unresolved compilation problem: 
//		System.out.println(x);// The final local variable x cannot be assigned. It must be blank and not using a compound assignment
//		int x = 10;
//		x++;
//		int y=x++;//10
//		System.out.println(y);// 11
//		System.out.println(x);// 12
//		int x = 10;
//		x++;
//		System.out.println(x);// 11
//		int y=x++;
//		System.out.println(y);// 11
//		System.out.println(x);// 12
//		System.out.println(y);// 11 // not clear with concepts.
//		char ch = 'a';
//		ch++;
//		int y= ch;
//		System.out.println(ch); // b
//		System.out.println(y); //98
//		double d = 10.5;
//		d++;
//		System.out.println(d);// 11.5
//		boolean b = true;
//		b++;
//		System.out.println(b);// Type mismatch: cannot convert from boolean to int
//		operator ++ can not applied to boolean
//		?We can apply inc/decr operators for eery primitive data type only except to boolean
//		5. Diff btwn B++ & b=b+1 //Date&Time=04:03PM,Wednesday,02/08/2023
//		If we applied any arithemetic operators between two variable a and b the the result type is always
//		max of (int,type of a, type of b)
//		byte a = 10;
//		byte b = 20;
//		byte c = a+b;
//		System.out.println(c);// Type mismatch: cannot convert from int to byte
//		we can solve/handle it by usinf type casting
//		byte c = (byte)(a+b);
//		System.out.println(c);// 30
//		byte b = 10;
//		b= b+1;// Type mismatch: cannot convert from int to byte
//		System.out.println(b);//Type mismatch: cannot convert from int to byte
//		byte b = 10;
//		b=(byte)(b+1);// using TypeCasting
//		System.out.println(b);// 11
//		
//		byte b = 10;
//		b++;// internal typecasting
//		System.out.println(b);// 11
//		NOTE:- In case of INcr/Decr internal TypeCasting perform automatically
//		
		
//		2.Arithmetic Opeartors:-(+,-,/,*,%)
		If we apply any arithmetic opearators between a&b 
		
		
		
		

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-08 16:09:33.107
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-08 16:09:33.108
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-08 16:09:33.214
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class OperatorsAndAssignment {

	public static void main(String[] args) {
//		Types of operators:-
//		1.Increment and decrement operators
//		2.Arithmetic operators
//		3.String concatenation operators
//		4.Relational operators
//		5.Equality operators
//		6.instanceOf operators
//		7.bitwise operators
//		8.short circuit operators
//		9.type cast operators
//		10.Assignment operators
//		11.conditional operators
//		12.new operators
//		13.[] operators
//		14.operator precedence
//		15.Evaluation order of operands
//		16.new vs newInstance()
//		17.instanceOf Vs isInstance()
//		18.ClassNotFoundException Vs NoClassDefFoundError

//		1. Increment & Decrement operators:-
//		Increment - Pre-Increment , y=++x;
//		Increment - Post-Increment, y=x++;
		
//		Decrement - Pre-Decrement , y=--x;
//		Decrement - Post-Decrement, y=x--;
		
//		int x = 10;
//		int y=++x; // Pre-Increment
//		int z =x++; // 11 // Post-Increment
//		System.out.println(y); // 11 - OP
//		System.out.println(z); // 11
//		int m =x++; // 11
//		System.out.println(m); // 11
		
//		int x=20;
//		int y= ++x; // Isi line me value incr ho gayi //Pre-Increment
//		System.out.println(y); // 21
//		System.out.println(x); // 21
		
//		int x= 30;
//		int y= x++; // Post-Increment
//		System.out.println(y); // 30 Post-Increment
//		System.out.println(x); // 31 Post-Increment
		
//		int y=20;
//		int x= --y; //Pre-Decrement
//		System.out.println(x); // 19 Pre-Decrement 
//		System.out.println(y); //19  Pre-Decrement
		
//		int z= 20;
//		int x= z--; // Post-Decrement
//		System.out.println(x); // 20 Post-Decrement
//		System.out.println(z); // 19 Post-Decrement
		
//		int x= 10;
//		int y = x++;
//		System.out.println(y); // 10
//		System.out.println(x);// 11
//		int z= --x;
//		System.out.println(z); // 10
//		We cant apply incremnt and decrement operators on constant values.
//		int x = 10;
//		int y = ++10;
//		System.out.println(y);// Unresolved compilation problem: 
		//Invalid argument to operation ++/--
//		Nesting of INC/DEC operators is not allowed
//		int x= 10;
//		int y= ++(++x);
//		System.out.println(y); // Unresolved compilation problem: 
		//Invalid argument to operation ++/--
//		For FINAL variables we cant apply incr/decr operators.
//		final int x = 10;
//		x++;// Unresolved compilation problem: 
//		int y= x++;// Unresolved compilation problem: 
//		System.out.println(y);// Unresolved compilation problem: 
		//The final local variable x cannot be assigned. It must be blank and not using a compound assignment
//		final int x =10;
//		x=11;// Unresolved compilation problem: 
//		System.out.println(x);// The final local variable x cannot be assigned. It must be blank and not using a compound assignment
//		int x = 10;
//		x++;
//		int y=x++;//10
//		System.out.println(y);// 11
//		System.out.println(x);// 12
//		int x = 10;
//		x++;
//		System.out.println(x);// 11
//		int y=x++;
//		System.out.println(y);// 11
//		System.out.println(x);// 12
//		System.out.println(y);// 11 // not clear with concepts.
//		char ch = 'a';
//		ch++;
//		int y= ch;
//		System.out.println(ch); // b
//		System.out.println(y); //98
//		double d = 10.5;
//		d++;
//		System.out.println(d);// 11.5
//		boolean b = true;
//		b++;
//		System.out.println(b);// Type mismatch: cannot convert from boolean to int
//		operator ++ can not applied to boolean
//		?We can apply inc/decr operators for eery primitive data type only except to boolean
//		5. Diff btwn B++ & b=b+1 //Date&Time=04:03PM,Wednesday,02/08/2023
//		If we applied any arithemetic operators between two variable a and b the the result type is always
//		max of (int,type of a, type of b)
//		byte a = 10;
//		byte b = 20;
//		byte c = a+b;
//		System.out.println(c);// Type mismatch: cannot convert from int to byte
//		we can solve/handle it by usinf type casting
//		byte c = (byte)(a+b);
//		System.out.println(c);// 30
//		byte b = 10;
//		b= b+1;// Type mismatch: cannot convert from int to byte
//		System.out.println(b);//Type mismatch: cannot convert from int to byte
//		byte b = 10;
//		b=(byte)(b+1);// using TypeCasting
//		System.out.println(b);// 11
//		
//		byte b = 10;
//		b++;// internal typecasting
//		System.out.println(b);// 11
//		NOTE:- In case of INcr/Decr internal TypeCasting perform automatically
//		
		
//		2.Arithmetic Opeartors:-(+,-,/,*,%)
		If we apply any arithmetic opearators between a&b 
		
		
		
		

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-08 16:09:33.216
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-08 16:09:33.218
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2023-02-10 15:41:51.147 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-02-10 15:42:01.889
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-10 15:42:01.889
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c0013b8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-10 15:42:01.889
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@42d174ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-10 15:42:12.225
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui 4 0 2023-02-10 15:50:01.120
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.debug.internal.ui.contexts.DebugWindowContextService.addDebugContextListener(org.eclipse.debug.ui.contexts.IDebugContextListener)" because "service" is null
	at org.eclipse.debug.internal.ui.contexts.DebugContextManager.addDebugContextListener(DebugContextManager.java:178)
	at org.eclipse.jdt.internal.debug.ui.EvaluationContextManager.<init>(EvaluationContextManager.java:72)
	at org.eclipse.jdt.internal.debug.ui.EvaluationContextManager$1.run(EvaluationContextManager.java:80)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)
!SESSION 2023-02-10 18:51:32.874 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-02-10 18:51:43.113
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-10 18:51:43.113
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c0013b8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-10 18:51:43.114
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@42d174ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-10 18:51:52.881
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-02-11 00:59:58.470 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-02-11 01:00:09.701
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-11 01:00:09.702
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6febec41,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3de88f64,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-11 01:00:09.702
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4e8afdad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79b8ecb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-11 01:00:21.525
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-02-12 21:22:31.742 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-02-12 21:22:41.157
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-12 21:22:41.158
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c0013b8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-12 21:22:41.158
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@42d174ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-12 21:22:50.304
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-02-13 00:12:10.580 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-02-13 00:12:18.635
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-13 00:12:18.635
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-13 00:12:18.635
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@42d174ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4ec0229c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-13 00:12:26.727
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-02-13 10:15:21.155 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-02-13 10:15:35.333
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-13 10:15:35.333
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c0013b8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c1ea7be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-13 10:15:35.333
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2493eec6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@42d174ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-13 10:15:47.742
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\2101917'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2023-02-13 10:37:13.566
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class OperatorsAndAssignment {

	public static void main(String[] args) {
//		Types of operators:-
//		1.Increment and decrement operators
//		2.Arithmetic operators
//		3.String concatenation operators
//		4.Relational operators
//		5.Equality operators
//		6.instanceOf operators
//		7.bitwise operators
//		8.short circuit operators
//		9.type cast operators
//		10.Assignment operators
//		11.conditional operators
//		12.new operators
//		13.[] operators
//		14.operator precedence
//		15.Evaluation order of operands
//		16.new vs newInstance()
//		17.instanceOf Vs isInstance()
//		18.ClassNotFoundException Vs NoClassDefFoundError

//		1. Increment & Decrement operators:-
//		Increment - Pre-Increment , y=++x;
//		Increment - Post-Increment, y=x++;
		
//		Decrement - Pre-Decrement , y=--x;
//		Decrement - Post-Decrement, y=x--;
		
//		int x = 10;
//		int y=++x; // Pre-Increment
//		int z =x++; // 11 // Post-Increment
//		System.out.println(y); // 11 - OP
//		System.out.println(z); // 11
//		int m =x++; // 11
//		System.out.println(m); // 11
		
//		int x=20;
//		int y= ++x; // Isi line me value incr ho gayi //Pre-Increment
//		System.out.println(y); // 21
//		System.out.println(x); // 21
		
//		int x= 30;
//		int y= x++; // Post-Increment
//		System.out.println(y); // 30 Post-Increment
//		System.out.println(x); // 31 Post-Increment
		
//		int y=20;
//		int x= --y; //Pre-Decrement
//		System.out.println(x); // 19 Pre-Decrement 
//		System.out.println(y); //19  Pre-Decrement
		
//		int z= 20;
//		int x= z--; // Post-Decrement
//		System.out.println(x); // 20 Post-Decrement
//		System.out.println(z); // 19 Post-Decrement
		
//		int x= 10;
//		int y = x++;
//		System.out.println(y); // 10
//		System.out.println(x);// 11
//		int z= --x;
//		System.out.println(z); // 10
//		We cant apply incremnt and decrement operators on constant values.
//		int x = 10;
//		int y = ++10;
//		System.out.println(y);// Unresolved compilation problem: 
		//Invalid argument to operation ++/--
//		Nesting of INC/DEC operators is not allowed
//		int x= 10;
//		int y= ++(++x);
//		System.out.println(y); // Unresolved compilation problem: 
		//Invalid argument to operation ++/--
//		For FINAL variables we cant apply incr/decr operators.
//		final int x = 10;
//		x++;// Unresolved compilation problem: 
//		int y= x++;// Unresolved compilation problem: 
//		System.out.println(y);// Unresolved compilation problem: 
		//The final local variable x cannot be assigned. It must be blank and not using a compound assignment
//		final int x =10;
//		x=11;// Unresolved compilation problem: 
//		System.out.println(x);// The final local variable x cannot be assigned. It must be blank and not using a compound assignment
//		int x = 10;
//		x++;
//		int y=x++;//10
//		System.out.println(y);// 11
//		System.out.println(x);// 12
//		int x = 10;
//		x++;
//		System.out.println(x);// 11
//		int y=x++;
//		System.out.println(y);// 11
//		System.out.println(x);// 12
//		System.out.println(y);// 11 // not clear with concepts.
//		char ch = 'a';
//		ch++;
//		int y= ch;
//		System.out.println(ch); // b
//		System.out.println(y); //98
//		double d = 10.5;
//		d++;
//		System.out.println(d);// 11.5
//		boolean b = true;
//		b++;
//		System.out.println(b);// Type mismatch: cannot convert from boolean to int
//		operator ++ can not applied to boolean
//		?We can apply inc/decr operators for eery primitive data type only except to boolean
//		
		//Date&Time=04:03PM,Wednesday,02/08/2023 START
//		
//		5. Diff btwn B++ & b=b+1 
//		If we applied any arithemetic operators between two variable a and b the the result type is always
//		max of (int,type of a, type of b)
//		byte a = 10;
//		byte b = 20;
//		byte c = a+b;
//		System.out.println(c);// Type mismatch: cannot convert from int to byte
//		we can solve/handle it by usinf type casting
//		byte c = (byte)(a+b);
//		System.out.println(c);// 30
//		byte b = 10;
//		b= b+1;// Type mismatch: cannot convert from int to byte
//		System.out.println(b);//Type mismatch: cannot convert from int to byte
//		byte b = 10;
//		b=(byte)(b+1);// using TypeCasting
//		System.out.println(b);// 11
//		
//		byte b = 10;
//		b++;// internal typecasting
//		System.out.println(b);// 11
//		NOTE:- In case of INcr/Decr internal TypeCasting perform automatically
//		
		
//		2.Arithmetic Opeartors:-(+,-,/,*,%)
//		If we apply any arithmetic opearators between a&b the result type is always
//		max(int,type of a , type of b)
//		
//		Fig: Typecasting flow
//		byte--->Short---->
//						----->int-->long-->float-->double
//				char---->
		
//		byte + byte= int
//		byte + short= int
//		short + short=int
//		byte + long=long
//		long + double=double
//		float + long=float
//		char + char=int
//		char + double=double
		//Date&Time=04:23PM,Wednesday,02/08/2023 END
		//Date&Time=05:45PM,Wednesday,02/08/2023 START
//		System.out.println('a'+0.89);// 97.89-->a=97 (ASCII Value) -->97=0.89=97.89 double// char + double=double
//		byte b = 6;
//		byte c = 6;
//		System.out.println(b+c);// 12 jo ki int hai= byte + byte= int
//		System.out.println(32767+32767);// 65534 is int value short + short=int
//		System.out.println(127+32767);// 32894     byte + short= int
//		System.out.println(127+23717372);// 23717499 byte + long=long
//		System.out.println(1234531+10.3333);//1234541.3333 //long + double=double
//		System.out.println(212.332+932049832);// 9.32050044332E8 // float + long=float
//		System.out.println('a'+'a');// 194 char + char=int
//		System.out.println('a'+765.27);// 862.27  char + double=double
		
//		Infinity:-
//		In integral arithmetic(byte,short,int ,long) there is no way to represent infinity if infinity is a result then we will get AE: in integral arithmetic
//		
//		System.out.println(10/0);// Exception in thread "main" java.lang.ArithmeticException: / by zero
//		
//		But in floating point arithmetic (float & double) there is a way to represent infinity
//		for this float & double classes conatins the following two contacts.
//		POSITIVE_INFINITY
//		NEGATIVE_iNFINITY
//		Hence even though result is infinity we wont get nay arithmetic exception in floating point arithmetic
//		
//		eg:-
//		System.out.println(10/0.0);// Infinity 10/float/double
//		System.out.println(10.0/0);// Infinity float/double/0
		
//		NaN:-(Not a number)
//		In integral arithmetic(byte,short,int ,long) there is no way to represent undefined result 
//		if undefined is a result then we will get AE: in integral arithmetic
//		Exception in thread "main" java.lang.ArithmeticException: / by zero
//		
//		System.out.println(0/0);// Exception in thread "main" java.lang.ArithmeticException: / by zero
//		
//		But in floating point arithmetic (float & double) there is a way to represent undefined result
//		for this float & double classes contains NaN constant.
//		Hence if the result is undefined we won't get any AE. in floating point arithmetic
//		
//		System.out.println(0.0/0);// NaN
//		System.out.println(-0/0.0); // NaN
//		System.out.println(10/0);//  java.lang.ArithmeticException: / by zero
//		System.out.println(-10/0);// java.lang.ArithmeticException: / by zero
//		System.out.println(10/-0);// java.lang.ArithmeticException: / by zero
//		System.out.println(10.0/0);// Infinity
//		System.out.println(10.0/-0);// Infinity
//		System.out.println(-10.0/-0);// -Infinity
//		System.out.println(-10.0/0);// -Infinity
//		System.out.println(10.0/-0.0);// -Infinity
//		System.out.println(-10.0/-0.0); // Infinity
//		System.out.println(0.0/-0);// NaN
//		System.out.println(-0.0/0);// NaN
//		System.out.println(-0.0/-0);// NaN
//		System.out.println(-1.0/-0);// -Infinity
		
//		for any x value including NaN the following expression return false
//		int x =0;
//		System.out.println(x<NaN); // NaN cannot be resolved to a variable
//		System.out.println(x<=NaN); // NaN cannot be resolved to a variable
//		System.out.println(x>NaN); // NaN cannot be resolved to a variable
//		System.out.println(x>=NaN);  // NaN cannot be resolved to a variable
//		System.out.println(x==NaN);// NaN cannot be resolved to a variable
		
//		for any x value including NaN the following expression return true
//		System.out.println(x!=NaN);// x cannot be resolved to a variable
		//NaN cannot be resolved to a variable
		
//		System.out.println(10<float.NaN); // Syntax error on token "float", invalid Expression
		
//		System.out.println(10<Float.NaN); // false
//		System.out.println(10<=Float.NaN);// false
//		System.out.println(10>Float.NaN);// false
//		System.out.println(10>=Float.NaN);// false
//		System.out.println(10==Float.NaN);// false
//		System.out.println(Float.NaN==Float.NaN);// false
//		System.out.println(10!=Float.NaN);// true
//		System.out.println(Float.NaN!=Float.NaN);// true
		
//		3.String concatenation operators
		
//		The only overloaded operator in java is (+) operator. 
//		Sometime it access arithmetic addition operators 
//		and sometime it access string concatenation opeartors.
		
		
//		Case1:-
//		If atleast one argument is String type  then
//		(+) operator access String concatenation operator.
		
//		Case2:-
//		If both argument is number type  then
//		(+) operator access arithmetic addition operator.
		
//		eg1:-
//		String a = "fahad";
//		int b=10, c=20, d=10;
//		System.out.println(a+b+c+d);// fahad102010 String concatenation operator
//		System.out.println(b+c+d+a);//40fahad this expression has same operator then order of precedence is from left to right so it start add value from left and concat with a. So it use both String concatenation operator and arithmetic addition operator 
//		System.out.println(b+c+a+d);// 30fahad10 this expression has same operator then order of precedence is from left to right so it start add value from left and concat with a. So it use both String concatenation operator and arithmetic addition operator 
//		System.out.println(b+a+c+d);// 10fahad2010
		
//		eg2:-
//		String a = "fahad";
//		int b=10, c=20, d=30;
//		a=b+c+d;
//		System.out.println(a); // Type mismatch: cannot convert from int to String
//		a=a+b+c;
//		System.out.println(a);// fahad1020
//		b=a+c+d;
//		System.out.println(b);// Type mismatch: cannot convert from String to int
//		b=b+c+d;
//		System.out.println(b);// 60
		
//		4.Relational operators (<,<=,>,>=)
//		We can apply relational operator for evry primitive type except boolean.
//		eg
//		System.out.println(10<20);// true
//		System.out.println('a'<20);// false
//		System.out.println('a'<97.6); //true
//		System.out.println('a'>'A'); // true
//		System.out.println(true>false);// The operator > is undefined for the argument type(s) boolean, boolean
		
//		 We cannot apply relational operators for object/Non-Primitive types
//		eg
//		System.out.println("durga123">"durga");// The operator > is undefined for the argument type(s) java.lang.String, java.lang.String
		
//		Nesting of relational operator is not allowed otherwise we will get CTE.
//		System.out.println(10<20<30);// The operator < is undefined for the argument type(s) boolean, int
		
//		5.Equality operators (==, !=)  //Date&Time=3:43PM,Friday,02/10/2023
//		we can use == operator for address comparison
		
//		we can  apply equality operator for every primitive type inclusding boolean.
//		System.out.println(10==20);// false
//		System.out.println('a'=='b'); // false
//		System.out.println('a'==97.0); //true
//		System.out.println(false==false);// true
//		System.out.println(true==true);// true
//		System.out.println('a'=='A');// false
//		System.out.println('a'==97);// true
//		System.out.println(127==127);// true
//		System.out.println("fahad"=="fahad");// true
//		System.out.println("fah"=="abd");// false// yahan address compare nahi ho raha.
		
		
//		we can apply equality operator for object type also
//		for object references r1 and r2 , r1== r2 iff both reference pointing to the same object
//		(reference comparison or address comparison)
		
//		Thread t1 = new Thread();
//		Thread t2 = new Thread();
//		Thread t3=t1;
//		System.out.println(t1==t3);// true
//		System.out.println(t1==t2);// false
		
//		Thread t1 = new Thread();
//		Object O = new Object();
//		String S = new String("durga");
//		System.out.println(t1==O);// false
//		System.out.println(O==S);// false
//		System.out.println(S==t1);// Incompatible operand types String and Thread
		
//		!= operators
//		we can use != operator for address comparison
//		System.out.println(10!=20);// true
//		System.out.println('a'!='b'); // true
//		System.out.println('a'!=97.0); //false
//		System.out.println(false!=false);// false
//		System.out.println(true!=true);// false
//		System.out.println('a'!='A');// true
//		System.out.println('a'!=97);// false
//		System.out.println(127!=127);// false
//		System.out.println("fahad"!="fahad");// false
//		System.out.println("fah"!="abd");// true
		
		// In general we can use == operator for address comparison 
//		and .equals() method for content comparison.
		
//		eg:
//		String S1 = new String("durga");
//		String S2= new String("durga");
//		System.out.println(S1==S2);//false // this compare address of variable/object
//		System.out.println(S1.equals(S2));// true// this method compare content of variable/objects
		
//		for any object reference r== null is always false
//		but null == null is always true
//		String s = new String("durga");
//		System.out.println(s==null);// flase
//		String n = null;
//		System.out.println(n==null);// true
//		System.out.println(null==null);// true
		
//		Lecture 19:- 
//		6.instanceOf operators
		//Date&Time=01:03PM,Friday,02/10/2023
//		We  can use instanceof operator to chek whether given object is of particular type or not.
		
//		Syntax:-
//		r instance X -- r is object reference  X is class or interface name
//		Thread t = new Thread();
//		System.out.println(t instanceof Thread);// true
//		System.out.println(t instanceof Object);  // true
//		System.out.println(t instanceof Runnable);// true
		
//		for any class or interface X null instanceof X  is always false
//		System.out.println(null instanceof Thread); // false
//		System.out.println(null instanceof Runnable);// false
		
		
//		7.bitwise operators (&, |, ^)
//		 & -- And,  returns true iff both arguments are true
//		 | -- OR  returns true iff atleast one arguments are true
//		 cap symbol - ^ -- Exor, exclusive OR, X-OR, returns true iff both arguments are different
		
//		eg :- 
//		System.out.println(true & false);// false
//		System.out.println(true | false);// true
//		System.out.println(true ^ false); // true
		
//		we can apply these for integral types also
//		System.out.println(4&5);// 4
//		System.out.println(4|5);// 5
//		System.out.println(4^5);// 1
		
		
//		bitwise complement operators (~):- tild symbol
//		We can apply for only integral type not for boolean type OW CTE.
//		System.out.println(~true);  // The operator ~ is undefined for the argument type(s) boolean
//		System.out.println(~4);// -5
		
//		Boolean complement operator : (!)--
//		We can apply this operator only for boolean type but not for integarl types.
//		System.out.println(!8);// The operator ! is undefined for the argument type(s) int
//		System.out.println(!false);// true
//		System.out.println(!true);// false
		
//		Note :-
//		&,|,^-- applicable for both boolean & integral
//		~ -- applicable for only integral but not for boolean
//		!  applicable only for boolean but not for integral
		
//		8.short circuit operators :(&&, ||)
		
//		These are exactly same as bitwise operators(&,|) except only following differences.
		
//				$,|		|		&&,||
//		-------------------------------				
//		1.Both argument	|	1. second argument		
//		should be evalu	|		evaluation is optional	
//		ated always.	|			
//		
//		2.relatively	|	2.relatively performance
//		performance 	|	high
////	low
//		
//		3.applicable	|	3. applicable only for boolean but not
//		for both boolean |	for integral
//		and integral types|
						
//		Note:- 1. x&&y == y will be evaluated iff x is true i.e. if x is false then y will not be evaluated.
		
//		2.  x||y - y will be evaluated iff x is false i.e. if x is true then y will not be evaluated.
			
//		eg_
//		int x= 10;
//		int y=15;
//		if(++x<10 & ++y>15) {
//			x++;
//		}else {
//			y++;
//		}
//		System.out.println(x+"..."+y);// 11...17
		
		
//		int x= 10;
//		int y=15;
//		if(++x<10 && ++y>15) {
//			x++;
//		}else {
//			y++;
//		}
//		System.out.println(x+"..."+y);// 11...16
		
//		int x= 10;
//		int y=15;
//		if(++x<10 | ++y>15) {
//			x++;
//		}else {
//			y++;
//		}
//		System.out.println(x+"..."+y);// 12...16
		
//		
//		int x= 10;
//		int y=15;
//		if(++x<10 || ++y>15) {
//			x++;
//		}else {
//			y++;
//		}
//		System.out.println(x+"..."+y);// 12...16
		
		
//		eg:- 2-
		
//		int x= 10;
//		if(++x<10 && (x/0>10)) {
//			System.out.println("Hello !!");
//		}else {
//			System.out.println("Hii !!");
//		}// o/p:- Hii
//		
//		int x= 10;
//		if(++x<10 & (x/0>10)) {
//			System.out.println("Hello !!");
//		}else {
//			System.out.println("Hii !!");
//		}// : / by zero
		
//		9.type cast operators
		
//		1. Implicit typecasting
//		2. Explicit Typecasting
		
//		1.Implicit:
//		Compiler is respond to perform ITC.
//		whenever we are assinging smaller Datatype value to bigger datatype variable ITC will be performed.
//		It is also known as widening and upcasting
//		There is no loss of information in this typecasting
//		The following are various possible conversion where ITC will be performed.
		
//		Fig: Typecasting flow : ITC
//		byte--->Short---->
//						----->int-->long-->float-->double
//				char---->
		
//		eg:-
//		int x='a'; 
//		System.out.println(x);// 97// compiler convert char to int automatically by ITC
		
//		double d = 10;
//		System.out.println(d);// 10.0  compiler convert int to double automatically by ITC
		
//		2.Explicit Type casting:
//		Programmer is responsible to perform ETC.
//		whenever we are assinging bigger Datatype value to smaller datatype variable then  ETC will be required.
//		It is also known as narrowing and downcasting
//		There may a chance of loss of information in this typecasting
		
//		The following are various possibilities  where ETC will  required.
		
//		Fig: ETC
//		byte<---Short<----
//						<-----int<--long<--float<--double
//				char<----
		
//		L---R -- Implicit TypeCasting
//		R---L -- Explicit Typecasting
		
//		eg:-
//		int x = 130;
//		byte b = x;
//		System.out.println(b);// Type mismatch: cannot convert from int to byte
		
		
//		int x = 130;
//		byte b = (byte)x;
//		System.out.println(b);// -126
		
//		whenever we are assingnig bigger D.T value to smaller D.T variable by ETC The MSB will be lost
//		We have to consider only LSB
		
//		int x= 150;
//		short s = (short)x;
//		System.out.println(s);// 150
		
//		byte  b = (byte)x;
//		System.out.println(b);// -106
		
//		Float to integral value -- digit after decimal point lost
//		double d = 130.456;
//		int x = (int)d;
//		System.out.println(x);// 130
//		byte b = (byte)d;
//		System.out.println(b);// -126
		
//		Lecture 21: 10.Assignment operators : 
//		Three types
//		1.Simple assingment
//		2.chained 
//		3.compound
		
//		1.Simple:-   int x= 10;
		
//		2.chained:-  
//		int a,b,c,d;
//		a=b=c=d=20;
//		System.out.println(a+".."+b+"..."+c+"..."+d);// 20..20...20...20
		
//		We can't performed chain assingment directly at the time of declaration
//		eg:-
//		 int a =b=c=d=20;
//		 System.out.println(a+".."+b+"..."+c+"..."+d);// b cannot be resolved to a variable
//			c cannot be resolved to a variable
//			d cannot be resolved to a variable
//		 at OperatorsAndAssignment.main(OperatorsAndAssignment.java:555)
		
//		int b,c,d;
//		int a=b=c=d=20;
//		System.out.println(a+".."+b+"..."+c+"..."+d);// 20..20...20...20
		
//		3.Compound Assignment Operator:-
//		Sometime assignment operator mixed with some other operator the we called CAO.
		
//		int a= 20;
//		a+=30;// -- a=a+30
//		System.out.println(a);// 50
		
//		The following are all possible compound assingment operator in java
		
//		+=		&=		>>= right shift operator
//		-=		|=		>>>= unsigned right shift operator
//		*=		^=		<<= left shift operator
//		/=
//		%=   Total === 11
		
//		in case of CAO internal T.C will performed automatically
//		 byte b = 10;
//		 b=b+1;  // max(int,byte,int)
//		 System.out.println(b);// Type mismatch: cannot convert from int to byte
		 
//		 byte b = 10;
//		 b++;
//		 System.out.println(b);// 11
		 
//		 byte b = 10;
//		 b+=1;  // += CAO internal TC is performed.
//		 System.out.println(b);//11
		
//		byte b = 127;
//		b+=1;
//		System.out.println(b);//-128
		
//		byte b = 127;
//		b+=3;
//		System.out.println(b);//-126
		
//		int a,c;
//		int b=20; // simple
//		int d; // simple only declared
//		a=c=d=20; //chained 
//		a+= b-= c*= d/= 2; // compound
//		System.out.println(a+"..."+b+"..."+c+"..."+d);// -160...-180...200...10
		
//		11.conditional operators: (? :) Ternary operator
//		The only possible ternary operator in java is conditional operator
//		Syntax : 
//		int  x= (10<20)? 30:40;
//		is same as in if else condition
//		if(10<20) {
//			System.out.println("30"); // 30
//		}else {
//			System.out.println("40");
//		}
//		System.out.println(x);// 30
//		neasting of conditional operator is also possible
		
//		 int x = (10>20)?30 :(40>50)?60:70;
//		 System.out.println(x);// 70
//		is same as 
//		if(10>20) {
//			System.out.println("30"); 
//		}else if(40>50) {
//			System.out.println("60");
//		}else {
//			System.out.println("70");// 70
//		}
		
//		a++, ++a -- unary operator because only one operand is there i.e "a"
//		a+b -- binary operator because two  operand is there i.e "a" and "b"
//		(c)?b:d; ternary operator because three  operand is there i.e "a" , "b" and "c"
		
//		c,b,d are 3 operand
		
		
//		12.new operators  -- theory only
//		we can use this new operator to create object of class
//		eg:- Test t = new Test();
//		After creating an object constructor will be executing to perform
//		initialization of object not for creation of object
		
		
		
//		13.[] operators -- theory only
		
//		we  can use this operator to declare and create arrays only
//		eg:- 
//		int[] x = new int[10];
//		In general other than arrays we are not going to use this operator anywhere else
		
//		Lecture 22: //		
//		
//		14.operator precedence
		
//		Java operator precedence chart
		
//		1. unary operator
//		[],x++,x--
//		++x,--x,~,|
//		new, <type>
		
//		2.Arithmetic Operator
//		*,/,%
//		+,-
		
//		3.Shift operator
//		>>,>>>,<<
		
//		4.Comparision operator
//		<,<=,>,>=,instanceof
		
//		5.equality operator:
//		==, !=
		
//		6. Bitwise operator
//		&,^,|
		
//		7.Short Circuit operator
//		&&, ||
		
//		8.conditional operator
//		? : 
		
//		9.Assignment operator
//		=, +=, -=, *=.args.clone(). all  11 CAO
		
//		15.Evaluation order of operands
		
//		If we apply any operator  on operand all operand will evaluated from left to right
		
		System.out.println(m1(1)+m1(2)*m1(3)/m1(4)+m1(5)*m1(6)); // 32
		 1+2
	

	}
	public static int m1(int i) {
		System.out.println(i);// 1,2,3,4,5,6
		return i;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
